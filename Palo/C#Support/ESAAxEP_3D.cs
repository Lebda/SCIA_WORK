//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
//[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("10.5.2017 13:01:43")]

namespace AxEP_3DLib {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{5eb792eb-2599-11d4-af9d-b905a34e577a}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
	[System.ComponentModel.ToolboxItemAttribute(true)]
    public class AxEP_3D : ESAAtl.AxESAAtlHost {
        
        private EP_3DLib._DEP_3DD ocx;
        
        private AxEP_3DEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxEP_3D() : 
                base("5eb792eb-2599-11d4-af9d-b905a34e577a") {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }
        
        public virtual short EnableOTRACK(short nEnableOTRACK) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableOTRACK", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableOTRACK(nEnableOTRACK)));
            return returnValue;
        }
        
        public virtual short IsOTRACKEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOTRACKEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsOTRACKEnabled()));
            return returnValue;
        }
        
        public virtual void ClearOTRACKPoints() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearOTRACKPoints", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearOTRACKPoints();
        }
        
        public virtual void AddOTRACKPoint(double dX, double dY, double dZ, short nFixed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddOTRACKPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddOTRACKPoint(dX, dY, dZ, nFixed);
        }
        
        public virtual short EnableOTRACKLocalZAxis(short nEnableOTRACKLocalZAxis) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableOTRACKLocalZAxis", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableOTRACKLocalZAxis(nEnableOTRACKLocalZAxis)));
            return returnValue;
        }
        
        public virtual short IsOTRACKLocalZAxisEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOTRACKLocalZAxisEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsOTRACKLocalZAxisEnabled()));
            return returnValue;
        }
        
        public virtual short OnOTRACKLength(double dLength, short nOTRACKPoint) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnOTRACKLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.OnOTRACKLength(dLength, nOTRACKPoint)));
            return returnValue;
        }
        
        public virtual void OTRACKSetup(object pOTRACKSetup) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OTRACKSetup", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OTRACKSetup(pOTRACKSetup);
        }
        
        public virtual short OnOTRACKPoint(double dX, double dY, double dZ, short nFixed) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnOTRACKPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.OnOTRACKPoint(dX, dY, dZ, nFixed)));
            return returnValue;
        }
        
        public virtual short EnableAdobe3DExport(short nEnableAdobe3DExport) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableAdobe3DExport", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableAdobe3DExport(nEnableAdobe3DExport)));
            return returnValue;
        }
        
        public virtual short IsAdobe3DExportEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsAdobe3DExportEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsAdobe3DExportEnabled()));
            return returnValue;
        }
        
        public virtual short SetAntialiasing(short nAntialiasing, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAntialiasing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetAntialiasing(nAntialiasing, bRedraw)));
            return returnValue;
        }
        
        public virtual short GetAntialiasing() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAntialiasing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetAntialiasing()));
            return returnValue;
        }
        
        public virtual void SavePreviewToFile(int nTypeOfFile, string bstrFileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SavePreviewToFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SavePreviewToFile(nTypeOfFile, bstrFileName);
        }
        
        public virtual void ViewVectorDown(double dX, double dY, double dZ, double dDownX, double dDownY, double dDownZ, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewVectorDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewVectorDown(dX, dY, dZ, dDownX, dDownY, dDownZ, bRedraw);
        }
        
        public virtual void GetWorkingPlaneSymbolProperties(ref short pURed, ref short pUGreen, ref short pUBlue, ref string pbstrU, ref short pVRed, ref short pVGreen, ref short pVBlue, ref string pbstrV, ref short pWRed, ref short pWGreen, ref short pWBlue) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetWorkingPlaneSymbolProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetWorkingPlaneSymbolProperties(ref pURed, ref pUGreen, ref pUBlue, ref pbstrU, ref pVRed, ref pVGreen, ref pVBlue, ref pbstrV, ref pWRed, ref pWGreen, ref pWBlue);
        }
        
        public virtual short SetInformation3DVisibility(short sInformation3DVisibility) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetInformation3DVisibility", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetInformation3DVisibility(sInformation3DVisibility)));
            return returnValue;
        }
        
        public virtual void AboutBox() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }
        
        public virtual short IsLightManagerEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsLightManagerEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsLightManagerEnabled()));
            return returnValue;
        }
        
        public virtual short IsOrthoEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOrthoEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsOrthoEnabled()));
            return returnValue;
        }
        
        public virtual short IsOrthoModeEnabled(short nOrthoMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOrthoModeEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsOrthoModeEnabled(nOrthoMode)));
            return returnValue;
        }
        
        public virtual void SetLastPoint3D(double dX, double dY, double dZ) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLastPoint3D", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetLastPoint3D(dX, dY, dZ);
        }
        
        public virtual void GetLastPoint3D(ref double pX, ref double pY, ref double pZ) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLastPoint3D", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetLastPoint3D(ref pX, ref pY, ref pZ);
        }
        
        public virtual short GetOrthoMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOrthoMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetOrthoMode()));
            return returnValue;
        }
        
        public virtual short SetOrthoMode(short nOrthoMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetOrthoMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetOrthoMode(nOrthoMode)));
            return returnValue;
        }
        
        public virtual short IsValidLastPoint3D() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsValidLastPoint3D", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsValidLastPoint3D()));
            return returnValue;
        }
        
        public virtual short SetIsValidLastPoint3DFlag(short bIsValidLastPoint3D) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetIsValidLastPoint3DFlag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetIsValidLastPoint3DFlag(bIsValidLastPoint3D)));
            return returnValue;
        }
        
        public virtual short EnableOrthoModeOnContextMenu(short nEnableOrthoModeOnContextMenu) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableOrthoModeOnContextMenu", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableOrthoModeOnContextMenu(nEnableOrthoModeOnContextMenu)));
            return returnValue;
        }
        
        public virtual void IsolinesPaletteWithParameter(short nPaletteStyle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsolinesPaletteWithParameter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.IsolinesPaletteWithParameter(nPaletteStyle);
        }
        
        public virtual short PickAllObjectsInSelection(short nFlag) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PickAllObjectsInSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.PickAllObjectsInSelection(nFlag)));
            return returnValue;
        }
        
        public virtual short GetPickAllObjectsInSelection() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPickAllObjectsInSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetPickAllObjectsInSelection()));
            return returnValue;
        }
        
        public virtual void SaveToFileEx(int nTypesToExport) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveToFileEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveToFileEx(nTypesToExport);
        }
        
        public virtual short SetGlobalAxesMetric(short nGlobalAxesMetric) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetGlobalAxesMetric", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetGlobalAxesMetric(nGlobalAxesMetric)));
            return returnValue;
        }
        
        public virtual short GetGlobalAxesMetric() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetGlobalAxesMetric", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetGlobalAxesMetric()));
            return returnValue;
        }
        
        public virtual short EnableLineWidths(short nEnableLineWidths) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableLineWidths", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableLineWidths(nEnableLineWidths)));
            return returnValue;
        }
        
        public virtual short EnabledLineWidths() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnabledLineWidths", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnabledLineWidths()));
            return returnValue;
        }
        
        public virtual void Connect3DDragAndDrop(object p3DDragAndDrop) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Connect3DDragAndDrop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Connect3DDragAndDrop(p3DDragAndDrop);
        }
        
        public virtual void LoadCursorFile(short nType, string bstrFileName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadCursorFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LoadCursorFile(nType, bstrFileName);
        }
        
        public virtual void SetCursorForSelectionSize(short nSize) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCursorForSelectionSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetCursorForSelectionSize(nSize);
        }
        
        public virtual void Connect3DMessageFilter(object p3DMessageFilter) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Connect3DMessageFilter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Connect3DMessageFilter(p3DMessageFilter);
        }
        
        public virtual short EnableOpenGLSelection(short nEnableOpenGLSelection) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableOpenGLSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableOpenGLSelection(nEnableOpenGLSelection)));
            return returnValue;
        }
        
        public virtual short IsOpenGLSelectionEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpenGLSelectionEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsOpenGLSelectionEnabled()));
            return returnValue;
        }
        
        public virtual short IsChangingOpenGLSelectionEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsChangingOpenGLSelectionEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsChangingOpenGLSelectionEnabled()));
            return returnValue;
        }
        
        public virtual short EnableOpenGLSelectionList(short nEnableOpenGLSelectionList) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableOpenGLSelectionList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableOpenGLSelectionList(nEnableOpenGLSelectionList)));
            return returnValue;
        }
        
        public virtual short IsOpenGLSelectionListEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpenGLSelectionListEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsOpenGLSelectionListEnabled()));
            return returnValue;
        }
        
        public virtual short IsChangingOpenGLSelectionListEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsChangingOpenGLSelectionListEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsChangingOpenGLSelectionListEnabled()));
            return returnValue;
        }
        
        public virtual short EnableOpenGLManipulationList(short nEnableOpenGLManipulationList) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableOpenGLManipulationList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableOpenGLManipulationList(nEnableOpenGLManipulationList)));
            return returnValue;
        }
        
        public virtual short IsOpenGLManipulationListEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsOpenGLManipulationListEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsOpenGLManipulationListEnabled()));
            return returnValue;
        }
        
        public virtual short IsChangingOpenGLManipulationListEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsChangingOpenGLManipulationListEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsChangingOpenGLManipulationListEnabled()));
            return returnValue;
        }
        
        public virtual void OnSceneRebuilding() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("OnSceneRebuilding", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.OnSceneRebuilding();
        }
        
        public virtual void Clear(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Clear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Clear(bRedraw);
        }
        
        public virtual void SetInitialDirectory(string strInitialDirectory) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetInitialDirectory", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetInitialDirectory(strInitialDirectory);
        }
        
        public virtual void HiddenLinesPainter(ref object ppHiddenLinesPainter) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HiddenLinesPainter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.HiddenLinesPainter(ref ppHiddenLinesPainter);
        }
        
        public virtual double SetOnScaleValue(double dOnScaleValue) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetOnScaleValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.SetOnScaleValue(dOnScaleValue)));
            return returnValue;
        }
        
        public virtual double GetOnScaleValue() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOnScaleValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetOnScaleValue()));
            return returnValue;
        }
        
        public virtual void GraphicPrinting(ref object ppGraphicPrinting) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GraphicPrinting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GraphicPrinting(ref ppGraphicPrinting);
        }
        
        public virtual double SetLinePatternLength(double dLength, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLinePatternLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.SetLinePatternLength(dLength, bRedraw)));
            return returnValue;
        }
        
        public virtual double GetLinePatternLength() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLinePatternLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetLinePatternLength()));
            return returnValue;
        }
        
        public virtual short EndCurrentSelection(int nSelFlags) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EndCurrentSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EndCurrentSelection(nSelFlags)));
            return returnValue;
        }
        
        public virtual short BreakCurrentSelection() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("BreakCurrentSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.BreakCurrentSelection()));
            return returnValue;
        }
        
        public virtual short CanBreakEndSelection(short sMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CanBreakEndSelection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.CanBreakEndSelection(sMode)));
            return returnValue;
        }
        
        public virtual void SetKeyCode(int nKeyCode, int nVirtKeyCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetKeyCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetKeyCode(nKeyCode, nVirtKeyCode);
        }
        
        public virtual short GetKeyCode(int nKeyCode, ref int pnVirtKeyCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetKeyCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetKeyCode(nKeyCode, ref pnVirtKeyCode)));
            return returnValue;
        }
        
        public virtual int Edit3DClipingBox(int bEdit3DClipingBox) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Edit3DClipingBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Edit3DClipingBox(bEdit3DClipingBox)));
            return returnValue;
        }
        
        public virtual int IsEdit3DClipingBoxEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsEdit3DClipingBoxEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.IsEdit3DClipingBoxEnabled()));
            return returnValue;
        }
        
        public virtual int Is3DClipingBoxEdited() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Is3DClipingBoxEdited", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Is3DClipingBoxEdited()));
            return returnValue;
        }
        
        public virtual int SetMenuLoop(int bSetMenuLoop) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMenuLoop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetMenuLoop(bSetMenuLoop)));
            return returnValue;
        }
        
        public virtual int GetMenuLoop() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMenuLoop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetMenuLoop()));
            return returnValue;
        }
        
        public virtual void ConnectHLEPostDrawing(object pConnectedHLEPostDrawing) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ConnectHLEPostDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ConnectHLEPostDrawing(pConnectedHLEPostDrawing);
        }
        
        public virtual object GetHLEPostDrawing() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetHLEPostDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetHLEPostDrawing()));
            return returnValue;
        }
        
        public virtual int SetOnZoomVisibilityFlag(int bOnZoomVisibility) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetOnZoomVisibilityFlag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SetOnZoomVisibilityFlag(bOnZoomVisibility)));
            return returnValue;
        }
        
        public virtual int GetOnZoomVisibilityFlag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOnZoomVisibilityFlag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetOnZoomVisibilityFlag()));
            return returnValue;
        }
        
        public virtual void HLEPostDrawing(ref object ppHLEPostDrawing) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HLEPostDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.HLEPostDrawing(ref ppHLEPostDrawing);
        }
        
        public virtual short SetDisableRecalcHiddenLines(short sRecalcHiddenLines) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDisableRecalcHiddenLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetDisableRecalcHiddenLines(sRecalcHiddenLines)));
            return returnValue;
        }
        
        public virtual short GetDisableRecalcHiddenLines() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDisableRecalcHiddenLines", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetDisableRecalcHiddenLines()));
            return returnValue;
        }
        
        public virtual void PrinterOutput() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PrinterOutput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PrinterOutput();
        }
        
        public virtual void IsolinesPalette() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsolinesPalette", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.IsolinesPalette();
        }
        
        public virtual short IsIsolinesPaletteEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsIsolinesPaletteEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsIsolinesPaletteEnabled()));
            return returnValue;
        }
        
        public virtual short IsolinesPaletteVisibility(short nVisibility) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsolinesPaletteVisibility", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsolinesPaletteVisibility(nVisibility)));
            return returnValue;
        }
        
        public virtual short IsIsolinesPaletteVisible() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsIsolinesPaletteVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsIsolinesPaletteVisible()));
            return returnValue;
        }
        
        public virtual short SetAutoCADLock(short nLock) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetAutoCADLock", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetAutoCADLock(nLock)));
            return returnValue;
        }
        
        public virtual short GetAutoCADLock() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetAutoCADLock", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetAutoCADLock()));
            return returnValue;
        }
        
        public virtual short IsPickAllObjectsEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsPickAllObjectsEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsPickAllObjectsEnabled()));
            return returnValue;
        }
        
        public virtual int EnableViewAllStyle(int bEnableViewAllStyle, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableViewAllStyle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.EnableViewAllStyle(bEnableViewAllStyle, bRedraw)));
            return returnValue;
        }
        
        public virtual short SetDragAndDropMode(short nDragAndDropMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDragAndDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetDragAndDropMode(nDragAndDropMode)));
            return returnValue;
        }
        
        public virtual short GetDragAndDropMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDragAndDropMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetDragAndDropMode()));
            return returnValue;
        }
        
        public virtual void WorkingPlaneAsViewPlane(int bEnable, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WorkingPlaneAsViewPlane", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.WorkingPlaneAsViewPlane(bEnable, bRedraw);
        }
        
        public virtual void PostdrawingViewAll(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PostdrawingViewAll", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PostdrawingViewAll(bRedraw);
        }
        
        public virtual short GetPainter() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPainter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetPainter()));
            return returnValue;
        }
        
        public virtual object GetSceneParameters() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSceneParameters", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetSceneParameters()));
            return returnValue;
        }
        
        public virtual int LoadFile(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.LoadFile(bRedraw)));
            return returnValue;
        }
        
        public virtual int TranslateMessage(object pMsgUnkn) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TranslateMessage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.TranslateMessage(pMsgUnkn)));
            return returnValue;
        }
        
        public virtual void ReloadBuffer(int bFillPostDrawingBuffer) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReloadBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ReloadBuffer(bFillPostDrawingBuffer);
        }
        
        public virtual int ClipGrid(int bClipGrid, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClipGrid(bClipGrid, bRedraw)));
            return returnValue;
        }
        
        public virtual int ClipPostDrawing(int bClipPostDrawing, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipPostDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClipPostDrawing(bClipPostDrawing, bRedraw)));
            return returnValue;
        }
        
        public virtual int ClipHighlighting(int bClipHighlighting, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipHighlighting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClipHighlighting(bClipHighlighting, bRedraw)));
            return returnValue;
        }
        
        public virtual int ClipLocalAxes(int bClipLocalAxes, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipLocalAxes", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClipLocalAxes(bClipLocalAxes, bRedraw)));
            return returnValue;
        }
        
        public virtual int ClipGlobalAxes(int bClipGlobalAxes, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipGlobalAxes", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClipGlobalAxes(bClipGlobalAxes, bRedraw)));
            return returnValue;
        }
        
        public virtual int ClipDraging(int bClipDraging, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipDraging", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClipDraging(bClipDraging, bRedraw)));
            return returnValue;
        }
        
        public virtual int ClipOSNAPPoints(int bClipOSNAPPoints, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClipOSNAPPoints", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ClipOSNAPPoints(bClipOSNAPPoints, bRedraw)));
            return returnValue;
        }
        
        public virtual double SetLocalAxesSymbolSize(double dLocalAxesSymbolSize, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLocalAxesSymbolSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.SetLocalAxesSymbolSize(dLocalAxesSymbolSize, bRedraw)));
            return returnValue;
        }
        
        public virtual double GetLocalAxesSymbolSize() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLocalAxesSymbolSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetLocalAxesSymbolSize()));
            return returnValue;
        }
        
        public virtual void Undo(object p3DSceneParameters, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Undo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Undo(p3DSceneParameters, bRedraw);
        }
        
        public virtual int EnableSaveDataForUndo(int bEnableSaveDataForUndo) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableSaveDataForUndo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.EnableSaveDataForUndo(bEnableSaveDataForUndo)));
            return returnValue;
        }
        
        public virtual int IsSaveDataForUndoEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsSaveDataForUndoEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.IsSaveDataForUndoEnabled()));
            return returnValue;
        }
        
        public virtual int ChangeHiddenLinesVisibility(int bChangeHiddenLinesVisibility) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ChangeHiddenLinesVisibility", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ChangeHiddenLinesVisibility(bChangeHiddenLinesVisibility)));
            return returnValue;
        }
        
        public virtual object GetHiddenLinesPainter() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetHiddenLinesPainter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetHiddenLinesPainter()));
            return returnValue;
        }
        
        public virtual void ViewAXO(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewAXO", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewAXO(bRedraw);
        }
        
        public virtual void SetCenterPointValue(double dX, double dY, double dZ) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCenterPointValue", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetCenterPointValue(dX, dY, dZ);
        }
        
        public virtual short GetGraphicPreprocesor() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetGraphicPreprocesor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetGraphicPreprocesor()));
            return returnValue;
        }
        
        public virtual void SaveDataForUndo() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveDataForUndo", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveDataForUndo();
        }
        
        public virtual void AttachGraphicPrinting(object pGraphicPrinting) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AttachGraphicPrinting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AttachGraphicPrinting(pGraphicPrinting);
        }
        
        public virtual void DetachGraphicPrinting() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DetachGraphicPrinting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DetachGraphicPrinting();
        }
        
        public virtual int LoadEP3File(string strFileName, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadEP3File", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.LoadEP3File(strFileName, bRedraw)));
            return returnValue;
        }
        
        public virtual short IsMoveVerticalEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsMoveVerticalEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsMoveVerticalEnabled()));
            return returnValue;
        }
        
        public virtual short IsZoomEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsZoomEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsZoomEnabled()));
            return returnValue;
        }
        
        public virtual short IsChangeViewVectorEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsChangeViewVectorEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsChangeViewVectorEnabled()));
            return returnValue;
        }
        
        public virtual void Standard3DClippingBox(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Standard3DClippingBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Standard3DClippingBox(bRedraw);
        }
        
        public virtual short SetProjection(short nProjection, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetProjection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetProjection(nProjection, bRedraw)));
            return returnValue;
        }
        
        public virtual short GetProjection() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetProjection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetProjection()));
            return returnValue;
        }
        
        public virtual double SetPerspectiveAngle(double dAngle, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetPerspectiveAngle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.SetPerspectiveAngle(dAngle, bRedraw)));
            return returnValue;
        }
        
        public virtual double GetPerspectiveAngle() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetPerspectiveAngle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.GetPerspectiveAngle()));
            return returnValue;
        }
        
        public virtual void WorkingPlaneSymbolProperties(short bURed, short bUGreen, short bUBlue, string bstrU, short bVRed, short bVGreen, short bVBlue, string bstrV, short bWRed, short bWGreen, short bWBlue, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("WorkingPlaneSymbolProperties", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.WorkingPlaneSymbolProperties(bURed, bUGreen, bUBlue, bstrU, bVRed, bVGreen, bVBlue, bstrV, bWRed, bWGreen, bWBlue, bRedraw);
        }
        
        public virtual void LightManager() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LightManager", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LightManager();
        }
        
        public virtual short EnableAutoBorderMode(short nEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableAutoBorderMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableAutoBorderMode(nEnable)));
            return returnValue;
        }
        
        public virtual short IsAutoBorderModeEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsAutoBorderModeEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsAutoBorderModeEnabled()));
            return returnValue;
        }
        
        public virtual void SetCenterPoint(short nCenterPointCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetCenterPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetCenterPoint(nCenterPointCode);
        }
        
        public virtual void ZoomRectangle() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomRectangle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomRectangle();
        }
        
        public virtual short IsZoomRectangleModeEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsZoomRectangleModeEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsZoomRectangleModeEnabled()));
            return returnValue;
        }
        
        public virtual int Get3DPointInWorkingPlane(int nX, int nY, ref double pX, ref double pY, ref double pZ) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Get3DPointInWorkingPlane", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Get3DPointInWorkingPlane(nX, nY, ref pX, ref pY, ref pZ)));
            return returnValue;
        }
        
        public virtual int Get3DPointInPlane(int nX, int nY, double dOriginX, double dOriginY, double dOriginZ, double dLocalXx, double dLocalXy, double dLocalXz, double dLocalYx, double dLocalYy, double dLocalYz, ref double pX, ref double pY, ref double pZ) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Get3DPointInPlane", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.Get3DPointInPlane(nX, nY, dOriginX, dOriginY, dOriginZ, dLocalXx, dLocalXy, dLocalXz, dLocalYx, dLocalYy, dLocalYz, ref pX, ref pY, ref pZ)));
            return returnValue;
        }
        
        public virtual void AbortDrag() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AbortDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AbortDrag();
        }
        
        public virtual short EnableDrag(short nEnableDrag) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableDrag(nEnableDrag)));
            return returnValue;
        }
        
        public virtual short IsDragEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsDragEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsDragEnabled()));
            return returnValue;
        }
        
        public virtual short SetOpenGLRenderMode(short nOpenGLRenderMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetOpenGLRenderMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetOpenGLRenderMode(nOpenGLRenderMode)));
            return returnValue;
        }
        
        public virtual short GetOpenGLRenderMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetOpenGLRenderMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetOpenGLRenderMode()));
            return returnValue;
        }
        
        public virtual short ViewGrid(short nViewGrid, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.ViewGrid(nViewGrid, bRedraw)));
            return returnValue;
        }
        
        public virtual short IsGridVisible() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsGridVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsGridVisible()));
            return returnValue;
        }
        
        public virtual short EnablePickAndRectangleMode(short nEnablePickAndRectangleMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnablePickAndRectangleMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnablePickAndRectangleMode(nEnablePickAndRectangleMode)));
            return returnValue;
        }
        
        public virtual short IsPickAndRectangleModeEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsPickAndRectangleModeEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsPickAndRectangleModeEnabled()));
            return returnValue;
        }
        
        public virtual short GetMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetMode()));
            return returnValue;
        }
        
        public virtual short SetGraphicMode(short nGraphicMode, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetGraphicMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetGraphicMode(nGraphicMode, bRedraw)));
            return returnValue;
        }
        
        public virtual short GetGraphicMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetGraphicMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetGraphicMode()));
            return returnValue;
        }
        
        public virtual object GetScene() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetScene", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetScene()));
            return returnValue;
        }
        
        public virtual object GetDraw3D() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDraw3D", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetDraw3D()));
            return returnValue;
        }
        
        public virtual short PickAllObjects(short nPickAllObjects) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PickAllObjects", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.PickAllObjects(nPickAllObjects)));
            return returnValue;
        }
        
        public virtual int GetWndHandle() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetWndHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetWndHandle()));
            return (returnValue);
        }
        
        public virtual void RedrawPostDrawing() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RedrawPostDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RedrawPostDrawing();
        }
        
        public virtual short SnapToGrid(short sSnapToGrid) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapToGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SnapToGrid(sSnapToGrid)));
            return returnValue;
        }
        
        public virtual short IsSnapToGrid() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsSnapToGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsSnapToGrid()));
            return returnValue;
        }
        
        public virtual short UseHighlighting(short nHighlighting) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UseHighlighting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.UseHighlighting(nHighlighting)));
            return returnValue;
        }
        
        public virtual void SetHighlightingColor(short bRed, short bGreen, short bBlue) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetHighlightingColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetHighlightingColor(bRed, bGreen, bBlue);
        }
        
        public virtual void SelectPostDrawing(int bSelectPostDrawing) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelectPostDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SelectPostDrawing(bSelectPostDrawing);
        }
        
        public virtual short ViewLocalAxes(short nViewLocalAxes, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewLocalAxes", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.ViewLocalAxes(nViewLocalAxes, bRedraw)));
            return returnValue;
        }
        
        public virtual short ViewGlobalAxes(short nViewGlobalAxes, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewGlobalAxes", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.ViewGlobalAxes(nViewGlobalAxes, bRedraw)));
            return returnValue;
        }
        
        public virtual void RotateWheel(int hRotateWheelWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RotateWheel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RotateWheel(hRotateWheelWnd);
        }
        
        public virtual void SlopeWheel(int hSlopeWheelWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SlopeWheel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SlopeWheel(hSlopeWheelWnd);
        }
        
        public virtual void ZOOMWheel(int hZOOMWheelWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZOOMWheel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZOOMWheel(hZOOMWheelWnd);
        }
        
        public virtual void MoveHorizontalWheel(int hMoveHorizontalWheelWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveHorizontalWheel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.MoveHorizontalWheel(hMoveHorizontalWheelWnd);
        }
        
        public virtual void MoveVerticalWheel(int hMoveVerticalWheelWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveVerticalWheel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.MoveVerticalWheel(hMoveVerticalWheelWnd);
        }
        
        public virtual short SetSelectionBorderMode(short nSelectionBorderMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetSelectionBorderMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.SetSelectionBorderMode(nSelectionBorderMode)));
            return returnValue;
        }
        
        public virtual short GetSelectionBorderMode() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSelectionBorderMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetSelectionBorderMode()));
            return returnValue;
        }
        
        public virtual void MoveHorizontalScrollBar(int hMoveHorizontalScrollBarWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveHorizontalScrollBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.MoveHorizontalScrollBar(hMoveHorizontalScrollBarWnd);
        }
        
        public virtual void MoveVerticalScrollBar(int hMoveVerticalScrollBarWnd) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveVerticalScrollBar", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.MoveVerticalScrollBar(hMoveVerticalScrollBarWnd);
        }
        
        public virtual void ClearOSNAPPoints(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearOSNAPPoints", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearOSNAPPoints(bRedraw);
        }
        
        public virtual short IsFastWiresUsed() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsFastWiresUsed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsFastWiresUsed()));
            return returnValue;
        }
        
        public virtual short IsHighlightingUsed() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsHighlightingUsed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsHighlightingUsed()));
            return returnValue;
        }
        
        public virtual short Is3DClippingBoxUsed() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Is3DClippingBoxUsed", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.Is3DClippingBoxUsed()));
            return returnValue;
        }
        
        public virtual void Scene(ref object ppVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Scene", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Scene(ref ppVal);
        }
        
        public virtual void Draw3D(ref object ppVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Draw3D", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Draw3D(ref ppVal);
        }
        
        public virtual void Grid(ref object ppVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Grid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Grid(ref ppVal);
        }
        
        public virtual void SceneParameters(ref object ppVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SceneParameters", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SceneParameters(ref ppVal);
        }
        
        public virtual void GetDispatch(ref object ppVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDispatch", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetDispatch(ref ppVal);
        }
        
        public virtual short EnableMoveHorizontal(short nEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableMoveHorizontal", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableMoveHorizontal(nEnable)));
            return returnValue;
        }
        
        public virtual short EnableMoveVertical(short nEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableMoveVertical", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableMoveVertical(nEnable)));
            return returnValue;
        }
        
        public virtual short EnableZoom(short nEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableZoom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableZoom(nEnable)));
            return returnValue;
        }
        
        public virtual short EnableChangeViewVector(short nEnable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnableChangeViewVector", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.EnableChangeViewVector(nEnable)));
            return returnValue;
        }
        
        public virtual short IsMoveHorizontalEnabled() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsMoveHorizontalEnabled", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.IsMoveHorizontalEnabled()));
            return returnValue;
        }
        
        public virtual void Painter(short nPainter, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Painter", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Painter(nPainter, bRedraw);
        }
        
        public virtual void Left(int nValue, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Left", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Left(nValue, bRedraw);
        }
        
        public virtual void Right(int nValue, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Right", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Right(nValue, bRedraw);
        }
        
        public virtual void Up(int nValue, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Up", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Up(nValue, bRedraw);
        }
        
        public virtual void Down(int nValue, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Down", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Down(nValue, bRedraw);
        }
        
        public virtual void RotateLeft(double dAngle, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RotateLeft", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RotateLeft(dAngle, bRedraw);
        }
        
        public virtual void RotateRight(double dAngle, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RotateRight", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RotateRight(dAngle, bRedraw);
        }
        
        public virtual void SlopeUp(double dAngle, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SlopeUp", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SlopeUp(dAngle, bRedraw);
        }
        
        public virtual void SlopeDown(double dAngle, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SlopeDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SlopeDown(dAngle, bRedraw);
        }
        
        public virtual void ZoomOut(double dZoom, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomOut", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomOut(dZoom, bRedraw);
        }
        
        public virtual void ZoomIn(double dZoom, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomIn", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomIn(dZoom, bRedraw);
        }
        
        public virtual void ViewAll(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewAll", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewAll(bRedraw);
        }
        
        public virtual void ViewVector(double dX, double dY, double dZ, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewVector", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewVector(dX, dY, dZ, bRedraw);
        }
        
        public virtual void ViewX(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewX", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewX(bRedraw);
        }
        
        public virtual void ViewY(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewY", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewY(bRedraw);
        }
        
        public virtual void ViewZ(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewZ", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewZ(bRedraw);
        }
        
        public virtual void ViewIZO(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewIZO", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewIZO(bRedraw);
        }
        
        public virtual void ViewXMinus(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewXMinus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewXMinus(bRedraw);
        }
        
        public virtual void ViewYMinus(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewYMinus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewYMinus(bRedraw);
        }
        
        public virtual void ViewZMinus(int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ViewZMinus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ViewZMinus(bRedraw);
        }
        
        public virtual void Navigator() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Navigator", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Navigator();
        }
        
        public virtual void SaveToFile() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveToFile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveToFile();
        }
        
        public virtual void CopyToClipboard() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CopyToClipboard", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.CopyToClipboard();
        }
        
        public virtual void Print() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Print", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Print();
        }
        
        public virtual void Redraw(int bRedrawFlag) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Redraw(bRedrawFlag);
        }
        
        public virtual void Connect(object pConnectedObject) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Connect", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Connect(pConnectedObject);
        }
        
        public virtual short UseFastWires(short nUseFastWires) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UseFastWires", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.UseFastWires(nUseFastWires)));
            return returnValue;
        }
        
        public virtual void SetWorkingPlane(double dX, double dY, double dZ, double dLXx, double dLYx, double dLZx, double dLXy, double dLYy, double dLZy, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetWorkingPlane", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetWorkingPlane(dX, dY, dZ, dLXx, dLYx, dLZx, dLXy, dLYy, dLZy, bRedraw);
        }
        
        public virtual void Connect3DEventsHandler(object pConnected3DEventsHandler) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Connect3DEventsHandler", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Connect3DEventsHandler(pConnected3DEventsHandler);
        }
        
        public virtual void Mode(short nMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Mode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Mode(nMode);
        }
        
        public virtual void ConnectPostDrawing(object pConnectedPostDrawing) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ConnectPostDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ConnectPostDrawing(pConnectedPostDrawing);
        }
        
        public virtual short Use3DClippingBox(short nUse3DClippingBox, int bRedraw) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Use3DClippingBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.Use3DClippingBox(nUse3DClippingBox, bRedraw)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxEP_3DEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(EP_3DLib._DEP_3DEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((EP_3DLib._DEP_3DD)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxEP_3DEventMulticaster : EP_3DLib._DEP_3DEvents {
        
        private AxEP_3D parent;
        
        public AxEP_3DEventMulticaster(AxEP_3D parent) {
            this.parent = parent;
        }
    }
}
