<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DesignForms_Equations4</name>
    </assembly>
    <members>
        <member name="M:Equations4.ConcreteDLL.AddData4CrossSectionEngine.XEP_AddData4CrossSectionEngine.SetMaximalCompressedPortion(System.Double,System.Double)">
            <summary>
            Maximal compression portion
            </summary>
            <param name="csIndex">Cs Index</param>
            <param name="compPortion">Compression portion</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle">
            <summary>
            Designer for rectangular cross section
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.ConcreteMaterial">
            <summary>
            Structure with concrete chracteristics 
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.ReinfMaterial">
            <summary>
            Structure with reinforcement characteristics (common for upper and lower layer)
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.LowerReinfMaterial">
            <summary>
            Structure with lower reinforcement characteristics
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.UpperReinfMaterial">
            <summary>
            Structure with upper reinforcement characteristics
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.DesignDefaults">
            <summary>
            Design defaults
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.CalcSetting">
            <summary>
            Calculation settings
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.SetSafetyParams(System.Double,System.Double,System.Double)">
            <summary>
            Set safety parameters according to EC2
            </summary>
            <param name="γS">Safety factor for concrete</param>
            <param name="γC">Safety factor for steel</param>
            <param name="αcc">Reduction factor for concrete</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.SetDesignDefaults(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set design defaults
            </summary>
            <param name="CoverLower">Cover of lower reinforcement (to the center of the bar) [meters]</param>
            <param name="CoverUpper">Cover of upper reinforcement (to the center of the bar) [meters]</param>
            <param name="DiamLower">Diameter of lower reinforcement [meters]</param>
            <param name="DiamUpper">Diameter of upper reinforcement [meters]</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.SetDesignParams(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Set desing parameters
            </summary>
            <param name="Coeff_z">The coefficient for calculation inner lever arm</param>
            <param name="Symetric">TRUE = desing symetric reinforcement; FALSE = desing layers independently</param>
            <param name="MinEccentricity">Use minimal eccentricity of normal force to increase bending moment</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.GetPODParams(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get parameters of plain of deformation
            </summary>
            <param name="B">Width of cross section</param>
            <param name="H">Height of cross section</param>
            <param name="nEd">Normal force [kN]</param>
            <param name="mEd">Bending moment [kNm]</param>
            <returns>
            Structure with POD parameters [x, d, z]\n
            </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.CalculateArea(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="B"></param>
            <param name="H"></param>
            <param name="nEd"></param>
            <param name="mEd"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner_Rectangle.CalculateAreas(System.Double,System.Double,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="B"></param>
            <param name="H"></param>
            <param name="Combis"></param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.Designer.TDesignDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TDesignDefaults.CoverLower">
            <summary>
            
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TDesignDefaults.CoverUpper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TDesignDefaults.DiamLower">
            <summary>
            
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TDesignDefaults.DiamUpper">
            <summary>
            
            </summary>
        </member>
        <member name="T:Equations4.ConcreteDLL.Designer.TCalcSettings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TCalcSettings.Coeff_z">
            <summary>
            
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TCalcSettings.Symetric">
            <summary>
            
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Designer.TCalcSettings.MinEccentricity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Equations4.ConcreteDLL.Designer.TDesigner">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.EveryDesignStepCalculationInfo(Equations4.ConcreteDLL.Designer.Wrappers.XEP_EveryDesignStepCalculationInWrapper)">
            <summary>
            Returns informations about every design step
            </summary>
            <param name="input">Use CONCRETE.Factory !</param>
            <returns>Object with output informations</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.CalculationInfoGeneral(Equations4.ConcreteDLL.Utils.CEP_DesignCalculatinoInfoGeneralInput)">
            <summary>
            Returns general info object
            </summary>
            <param name="input">Use CONCRETE.Factory !</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.OneCalcStepInfo(Equations4.ConcreteDLL.Utils.CEP_OneStepCalculationInfoInput)">
            <summary>
            Returns result for one calculation step
            </summary>
            <param name="input">Use CONCRETE.Factory !</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.OneCalcEdgeInfo(Equations4.ConcreteDLL.Utils.CEP_OneEdgeCalculationInput)">
            <summary>
            Returns result for one calculation step and one edge
            </summary>
            <param name="input">Use CONCRETE.Factory !</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.InitialiseDesignAddData4MultiForce(System.Double,System.Double)">
            <summary>
            Method initialise design add data which are needed for multi design.
            Default values are set for all data
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="CssID">ID of cross-section</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetAddEdgeData(System.Double,System.Collections.IList)">
            <summary>
            Additional edge data 
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="AddEdgeDataArray">Array of CAddEdgeData !!</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetAddCornerData(System.Double,System.Collections.IList)">
            <summary>
            Additional corner data 
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="AddCornerDataArray">Array of CAddEdgeData !!</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetIsCssSymetric(System.Double,System.Boolean)">
            <summary>
            Set information in add about symetricity of Css, used in edge selection algoritmh e.g.
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="IsCssInAddDataSymetric">boolean value</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetTypeBiaxialCalc(System.Double,System.Double)">
            <summary>
            Function for set type of position reinforcement for biaxial calculation
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="TypeBiaxialCalc">if (TypeBiaxialCalc = 0) than design reinforcement to edge, else design reinforcement to corner  </param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetMinimalSpacingForRealBars(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="MinBarsSpacing">Minimal clear distance between bars for design</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetUniaxialCoef(System.Double,System.Double)">
            <summary>
            Function for set coefficient for Uniaxial calculation
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="UniaxialCoeff">Coefficient for detecting Uniaxial calculation</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignMultiReinforcement(Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn)">
            <summary>
            Multi reinforcement design
            </summary>
            <param name="Input">Parameters for design use CONCRETE.Factory.CreateDesignReinf4MultiForceIn !</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetDesignedReinfMulti(Equations4.ConcreteDLL.Utils.CEP_MultiDesignResultKey)">
            <summary>
             Multi reinforcement design - getting results
            </summary>
            <param name="input">key specifies the wanted results</param>
            <returns>multidesign results</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.InitialiseDesignAddData(System.Double,System.Double)">
            <summary>
            Method initialise design add data which are needed for design.
            Default values are set for all data
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="CssID">ID of cross-section</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.InitialiseDesignAddData(System.Double)">
            <summary>
            Method initialise design add data which are needed for design.
            Default values are set for all data, default Css with ID=0 is used
            </summary>
            <param name="desAddDataID">ID of design add data</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetDiameterAndCover(System.Double,System.Double,System.Double)">
            <summary>
            Method set diameter and cover into design add data
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="reinfDiam">diameter of reinforcement</param>
            <param name="reinfCover">cover of reinforcement</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetOffsetOfLayersOfReinforcement(System.Double,System.Double)">
            <summary>
            Method set offset between two layers of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="reinfOffset">offset of reinforcements</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetCoefficientForReinforcementAreaForLayer(System.Double,System.Double)">
            <summary>
            Method set coefficient which is used for multiplication of reinforcements area in layer
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="CoefAsmax">coefficient</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetIfCanBeUseUserReinforcement(System.Double,System.Double)">
            <summary>
            Method set if can be take into account during design also reinforcement which user set
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="Use">0 no, 1 yes</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetCS2LogFile(System.Double,System.String)">
            <summary>
            Method set file name for cs2 - In the case of design problem. Just for debugging.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="FileName">String with complete path and filename.cs2</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetMaximalCompressedPortion(System.Double,System.Double)">
            <summary>
            Method set maximal compressed portion for interaction diagram which is used during design of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="compPortion">compressed portion coefficient</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetExtraRotationPoint(System.Double,System.Double,System.Double)">
            <summary>
             Method set rotation point for interaction diagram which is used during design of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="heightRatio">height ratio</param>
            <param name="strainRatio">strain ratio</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetDesignMaterialDiagram(System.Double,System.Collections.IList)">
            <summary>
            Method set material diagram of reinforcement into design add data
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="Diagram">List of points of diagram - (strain,stress)</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetDesignUniaxialAddData(System.Double,System.Double,System.Collections.IList)">
            <summary>
            Method sets uniaxial edge add data - coordinates of two points in which reinforcement will be designed - for uniaxial design.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="desUniaxialAddDataID">ID of design uniaxial add data</param>
            <param name="uniaxialAddEdgeData">List of two points (index of edge, y coord.,z coord)</param>
            <returns>Output -1.0 if setting of  edge add data was unsuccessful and 1.0 if successful</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetEdgeAddDataGen(System.Double,System.Double,System.Collections.IList)">
            <summary>
            Method sets general edge add data - for selected edge have to be known index and ratio of reinforcement, additionally coordinates for centroid of reinforcement - for general and biaxial design.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="desGeneralAddDataID">ID of design edge add data</param>
            <param name="generalAddEdgeData">List of points (index, ratio of reinforcement, y coord., z coord)</param>
            <returns>Output -1.0 if setting of  edge add data was unsucessful and 1.0 if sucessful</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetCornerAddData(System.Double,System.Double,System.Collections.IList)">
            <summary>
            Method sets general edge add data - for selected edge have to be known index, additionally ratio of reinforcement - for corner design
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            /// <param name="desCornerAddDataID">ID of design corner add data</param>
            <param name="generalAddCornerData">List of points (index, ratio of reinforcement)</param>
            <returns>Output -1.0 if setting of  edge add data was unsuccessful and 1.0 if successful</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetInfoAboutCorner(System.Double,System.Double)">
            <summary>
            Method returns info about corner of cross-section
            </summary>
            <param name="CssID">Id of cross-section, default CSS has CssId = 0</param>
            <param name="cornerIndex">index of corner</param>
            <returns>corner ID,y coordinates, z coordinates</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetNumberOfEdgesWithDesignedReinforcement(System.Double)">
            <summary>
            Method returns number of edges with designed reinforcement
            </summary>
            <param name="HashKey">HashKey obatained form design of reinforcement</param>
            <returns>number of edges</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetDesignedReinforcementInfoForEdge(System.Double,System.Double)">
            <summary>
            Method returns designed reinforcement for edge
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="EdgeIndex">index of edge of cross-section</param>
            <returns>y coordinate of centroid of reinforcement,z coordinate of centroid of reinforcement
            area of reinforcement, if reinforcement is tensioned, diameter of reinforcement
            </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetNumberOfLayersWithReinforcementForEdges(System.Double,System.Double)">
            <summary>
            Method returns number of designed layers of reinforcement for edge of cross-section
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="edgeIndex">index of edge of cross-section</param>
            <returns>number of layers of reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetDesignedReinforcementInfoForLayerOfEdge(System.Double,System.Double,System.Double)">
            <summary>
             Method returns designed reinforcement for layer of reinforcement for edge
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="EdgeIndex">index of edge of cross-section</param>
            <param name="layerIndex">index of layer</param>
            <returns>y coordinate of centroid of reinforcement,z coordinate of centroid of reinforcement
            area of reinforcement, if reinforcement is tensioned, diameter of reinforcement
            </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementUniaxialAroundGeneralAxis(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General uniaxial method for design reinforcement for general axis defined by angle.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="Alpha">Angle of axis</param>
            <param name="desUniaxEdgeAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
            <returns>>HashKey - identificator of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementUniaxialAroundGeneralAxis(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Uniaxial method for design reinforcement for general axis defined by angle
            old function with default design add data which was set by SetAddData function
            </summary>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="Alpha">Angle of axis</param>
            <returns>HashKey - identificator of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementUniaxialAroundYAxis(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Uniaxial method for design reinforcement for moment action around y axis of cross-section.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="desUniaxEdgeAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementUniaxialAroundZAxis(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Uniaxial method for design reinforcement for moment action around z axis of cross-section.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="desUniaxEdgeAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementGeneralBiaxial(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Biaxial design of reinforcement - according to formula from EC (Myrd/Medy)^biaxcoef + (Mzrd/zMed)^biaxcoef lesser than 1.0
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="biaxCoef">Vaule of biaxial coefficient - default 1.4</param>
            <param name="desGeneralEdgeAddData">Id of general edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementGeneralBiaxial(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Biaxial design of reinforcement - according to formula from EC (Myrd/Medy)^biaxcoef + (Mzrd/zMed)^biaxcoef lesser than 1.0
            old function with default design add data which was set by SetAddData function
            </summary>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="biaxCoef">Vaule of biaxial coefficient - default 1.4</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementGeneral(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General design of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="desGeneralEdgeAddData">Id of general edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementGeneral(System.Double,System.Double,System.Double)">
            <summary>
            General design of reinforcement
            old function with default design add data which was set by SetAddData function
            </summary>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementCorner(System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>
            Corner design of reinforcement
             </summary>
             <param name="desAddDataID">ID of design add data</param>
             <param name="N">Value of normal force</param>
             <param name="My">Value of bending moment acting around y axis</param>
             <param name="Mz">Value of bending moment acting around z axis</param>
             <param name="desGeneralCornerAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
             <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementCorner(System.Double,System.Double,System.Double)">
             <summary>
            Corner design of reinforcement
             old function with default design add data which was set by SetAddData function
             </summary>
             <param name="N">Value of normal force</param>
             <param name="My">Value of bending moment acting around y axis</param>
             <param name="Mz">Value of bending moment acting around z axis</param>
             <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignUniaxialGenLayers(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General uniaxial method for design reinforcement in layers for general axis defined by angle.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="Alpha">Angle of axis</param>
            <param name="numberOfLayers">Number of wanted layers</param>
            <param name="desUniaxEdgeAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementGeneralBiaxialLayers(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Biaxial design of reinforcement in layers - according to formula from EC (Myrd/Medy)^biaxcoef + (Mzrd/zMed)^biaxcoef lesser than 1.0
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="biaxCoef">Vaule of biaxial coefficient - default 1.4</param>
            <param name="numberOfLayers">Number of wanted layers</param>
            <param name="desGeneralEdgeAddData">Id of general edge add data, if they are not defined use -1.0</param>
            <returns>>HashKey - identificator of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.DesignReinforcementGeneralLayers(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General design of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="numberOfLayers">Number of wanted layers</param>
            <param name="desGeneralEdgeAddData">Id of general edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetNumberOfEdgesOfWholeCrossSection(System.Double)">
            <summary>
            Method returns number of edges of whole cross-section
            </summary>
            <param name="CssID">Id of cross-section</param>
            <returns>number of edges </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetNumberOfEdgesOfWholeCrossSection">
            <summary>
            Method returns number of edges for default cross-section - id = 0
            </summary>
            <returns>number of edges</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetInfoAboutEdgeOfCrossSection(System.Double)">
            <summary>
            Method returns info about edge for default cross-section - id = 0
            </summary>
            <param name="EdgeIndex">index of edge</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetInfoAboutEdgeOfCrossSection(System.Double,System.Double)">
            <summary>
            Method returns info about edge of cross-section
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="EdgeIndex">index of edge</param>
            <returns>index of first point of edge, index of second point of edge, index of edge</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetIndexesOfEdgesWithDesignedReinforcementFromUniaxialDesign(System.Double)">
            <summary>
            Method returns indexes of edges with designed reinforcement from uniaxial design
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <returns>first edge index, second edge index</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.CalculateReinfRatioForEdge(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method calculates ratio of reinforcement for edge for acting load
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="edgeIndex">index of edge</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="fck">stength of concrete</param>
            <returns>ratio of reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.CreatePracticalCalculator(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method creates practical calculator
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="distance">perpendicular distance from edge</param>
            <param name="diameter">diameter of reinforcement</param>
            <param name="minBarsSpacing">minimal spacing between bars</param>
            <param name="cover">cover of reinforcemement</param>
            <returns>Id of practical calculator - .HashKey, error info</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetAreasOfReinforcementForEdgeForPracticalCalculator(System.Double,System.Collections.IList)">
            <summary>
            Method sets amount of reinforcement for edges for practical calculator
            </summary>
            <param name="keyHash">Id of practical calculator</param>
            <param name="reinfArea">area of reinforcement</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.OptReinfDiamOnEdge(System.Double,System.Double)">
            <summary>
            Method optimizes diameter of reinforcement
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>optimized diameter for edge</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.MaxNumberBarsOnEdge(System.Double,System.Double)">
            <summary>
            Method calculates maximal number of bars
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>maximal number of bars</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.NumberBarsOnEdge(System.Double,System.Double)">
            <summary>
            Method calculates number of bars for edge
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>number of bars</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SpacingReqReinf(System.Double,System.Double)">
            <summary>
            Method calculates spacing of required reinforcement
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>spacing of required reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.LengthOfLineForDesign(System.Double,System.Double)">
            <summary>
            Method calculates length of layer of reinforcement
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>length, start point( y coord, z coord), end point( y coord, z coord),error info</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.AssignReinfToEdge(System.Double,System.Double,System.Double)">
            <summary>
            Method assign reinforcement bar to edge according to coordinates
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="reinfCoordY">y coordinates of point</param>
            <param name="reinfCoordZ">z coordinates of point</param>
            <returns>index of edge, perpendicular distance from edge</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.ArrayReqReinf(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method creates real reinforcement bars from required area via practical calculator
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <param name="typeArea">type of area of reinforcement - 0 - round 1 - ceil</param>
            <param name="minNumber">minimal number of bars for edge</param>
            <returns>list of bars (barindex,y coord, z coord, As and diameter) </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetDifferentDiameterAndCoverForEdges(System.Double,System.Collections.IList)">
            <summary>
            Method sets different diameters and covers for edges of cross-section
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="AddEdgeData">Aditional edge data</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.CreateRealBarsAfterDesignOfReinf(System.Double)">
            <summary>
            Method sets flag for creation of real bars after design of reinforcement.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetPositionOfReinforcementForEdge(System.Double,System.Double)">
            <summary>
            Method return position of reinforcement for edge
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="EdgeIndex">Index of edge</param>
            <returns>y, z coordinate of centre of gravity of designed reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetPositionOfReinforcementForLayerOfEdge(System.Double,System.Double,System.Double)">
            <summary>
            Method return position of reinforcement for layer of edge
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="EdgeIndex">Index of edge</param>
            <param name="layerIndex">Index of layer</param>
            <returns>y, z coordinate of centre of gravity of designed reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetHeightOfCompressionZone4DesignedReinf(System.Double)">
            <summary>
            Method return height of compression zone for designed reinforcement
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <returns>x</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetEffectiveHeigthOfCrossSection4DesignedReinf(System.Double)">
            <summary>
            Method returns effective height of cross-section for designed reinforcement
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <returns>d</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.GetInnerLeverArm4DesignedReinf(System.Double)">
            <summary>
            Method returns structure with inner lever arm, inner lever arm above centre of gravity and inner lever arm under centre of gravity
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <returns>z,z+,z-</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetAddData(System.Double,System.Double)">
            <summary>
            Old method for initialization of design add data - obsolete
            </summary>
            <param name="Diameter">diemater of reinforcement</param>
            <param name="Cover">cover of reinforcement</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.SetDesignMaterial(System.Collections.Generic.List{System.Object})">
            <summary>
            Old method for set of material diagram of reinforcement - obsolete
            </summary>
            <param name="Diagram">List of material points</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.TDesigner.ClearReinfDiagram">
            <summary>
            Old method for clearing of material diagram
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.CalculationInfoGeneral(Equations4.ConcreteDLL.Utils.CEP_DesignCalculatinoInfoGeneralInput)">
            <summary>
            Returns general info object
            </summary>
            <param name="input">Use CONCRETE.Factory !</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.OneCalcStepInfo(Equations4.ConcreteDLL.Utils.CEP_OneStepCalculationInfoInput)">
            <summary>
            Returns result for one calculation step
            </summary>
            <param name="input">Use CONCRETE.Factory !</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.OneCalcEdgeInfo(Equations4.ConcreteDLL.Utils.CEP_OneEdgeCalculationInput)">
            <summary>
            Returns result for one calculation step and one edge
            </summary>
            <param name="input">Use CONCRETE.Factory !</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.InitialiseDesignAddData4MultiForce(System.Double,System.Double)">
            <summary>
            Method initialise design add data which are needed for multi design.
            Default values are set for all data
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="CssID">ID of cross-section</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetAddEdgeData(System.Double,System.Collections.IList)">
            <summary>
            Additional edge data 
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="AddEdgeDataArray">Array of CAddEdgeData !!</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetAddCornerData(System.Double,System.Collections.IList)">
            <summary>
            Additional corner data 
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="AddCornerDataArray">Array of CAddEdgeData !!</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetTypeBiaxialCalc(System.Double,System.Double)">
            <summary>
            Function for set type of position reinforcement for biaxial calculation
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="TypeBiaxialCalc">if (TypeBiaxialCalc = 0) than design reinforcement to edge, else design reinforcement to corner  </param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetUniaxialCoef(System.Double,System.Double)">
            <summary>
            Function for set coefficient for Uniaxial calculation
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="UniaxialCoeff">Coefficient for detecting Uniaxial calculation</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignMultiReinforcement(Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn)">
            <summary>
            Multi reinforcement design
            </summary>
            <param name="Input">Parameters for design use CONCRETE.Factory.CreateDesignReinf4MultiForceIn !</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetDesignedReinfMulti(Equations4.ConcreteDLL.Utils.CEP_MultiDesignResultKey)">
            <summary>
             Multi reinforcement design - getting results
            </summary>
            <param name="input">key specifies the wanted results</param>
            <returns>multidesign results</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.InitialiseDesignAddData(System.Double,System.Double)">
            <summary>
            Method initialise design add data which are needed for design.
            Default values are set for all data
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="CssID">ID of cross-section</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.InitialiseDesignAddData(System.Double)">
            <summary>
            Method initialise design add data which are needed for design.
            Default values are set for all data, default Css with ID=0 is used
            </summary>
            <param name="desAddDataID">ID of design add data</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetDiameterAndCover(System.Double,System.Double,System.Double)">
            <summary>
            Method set diameter and cover into design add data
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="reinfDiam">diameter of reinforcement</param>
            <param name="reinfCover">cover of reinforcement</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetOffsetOfLayersOfReinforcement(System.Double,System.Double)">
            <summary>
            Method set offset between two layers of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="reinfOffset">offset of reinforcements</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetCoefficientForReinforcementAreaForLayer(System.Double,System.Double)">
            <summary>
            Method set coefficient which is used for multiplication of reinforcements area in layer
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="CoefAsmax">coefficient</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetIfCanBeUseUserReinforcement(System.Double,System.Double)">
            <summary>
            Method set if can be take into account during design also reinforcement which user set
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="Use">0 no, 1 yes</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetCS2LogFile(System.Double,System.String)">
            <summary>
            Method set file name for cs2 - In the case of design problem. Just for debugging.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="FileName">String with complete path and filename.cs2</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetMaximalCompressedPortion(System.Double,System.Double)">
            <summary>
            Method set maximal compressed portion for interaction diagram which is used during design of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="compPortion">compressed portion coefficient</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetExtraRotationPoint(System.Double,System.Double,System.Double)">
            <summary>
             Method set rotation point for interaction diagram which is used during design of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="heightRatio">height ratio</param>
            <param name="strainRatio">strain ratio</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetDesignMaterialDiagram(System.Double,System.Collections.IList)">
            <summary>
            Method set material diagram of reinforcement into design add data
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="Diagram">List of points of diagram - (strain,stress)</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetDesignUniaxialAddData(System.Double,System.Double,System.Collections.IList)">
            <summary>
            Method sets uniaxial edge add data - coordinates of two points in which reinforcement will be designed - for uniaxial design.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="desUniaxialAddDataID">ID of design uniaxial add data</param>
            <param name="uniaxialAddEdgeData">List of two points (index of edge, y coord.,z coord)</param>
            <returns>Output -1.0 if setting of  edge add data was unsuccessful and 1.0 if successful</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetEdgeAddDataGen(System.Double,System.Double,System.Collections.IList)">
            <summary>
            Method sets general edge add data - for selected edge have to be known index and ratio of reinforcement, additionally coordinates for centroid of reinforcement - for general and biaxial design.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="desGeneralAddDataID">ID of design edge add data</param>
            <param name="generalAddEdgeData">List of points (index, ratio of reinforcement, y coord., z coord)</param>
            <returns>Output -1.0 if setting of  edge add data was unsucessful and 1.0 if sucessful</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetCornerAddData(System.Double,System.Double,System.Collections.IList)">
            <summary>
            Method sets general edge add data - for selected edge have to be known index, additionally ratio of reinforcement - for corner design
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            /// <param name="desCornerAddDataID">ID of design corner add data</param>
            <param name="generalAddCornerData">List of points (index, ratio of reinforcement)</param>
            <returns>Output -1.0 if setting of  edge add data was unsuccessful and 1.0 if successful</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetInfoAboutCorner(System.Double,System.Double)">
            <summary>
            Method returns info about corner of cross-section
            </summary>
            <param name="CssID">Id of cross-section, default CSS has CssId = 0</param>
            <param name="cornerIndex">index of corner</param>
            <returns>corner ID,y coordinates, z coordinates</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetNumberOfEdgesWithDesignedReinforcement(System.Double)">
            <summary>
            Method returns number of edges with designed reinforcement
            </summary>
            <param name="HashKey">HashKey obatained form design of reinforcement</param>
            <returns>number of edges</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetDesignedReinforcementInfoForEdge(System.Double,System.Double)">
            <summary>
            Method returns designed reinforcement for edge
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="EdgeIndex">index of edge of cross-section</param>
            <returns>y coordinate of centroid of reinforcement,z coordinate of centroid of reinforcement
            area of reinforcement, if reinforcement is tensioned, diameter of reinforcement
            </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetNumberOfLayersWithReinforcementForEdges(System.Double,System.Double)">
            <summary>
            Method returns number of designed layers of reinforcement for edge of cross-section
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="edgeIndex">index of edge of cross-section</param>
            <returns>number of layers of reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetDesignedReinforcementInfoForLayerOfEdge(System.Double,System.Double,System.Double)">
            <summary>
             Method returns designed reinforcement for layer of reinforcement for edge
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="EdgeIndex">index of edge of cross-section</param>
            <param name="layerIndex">index of layer</param>
            <returns>y coordinate of centroid of reinforcement,z coordinate of centroid of reinforcement
            area of reinforcement, if reinforcement is tensioned, diameter of reinforcement
            </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementUniaxialAroundGeneralAxis(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General uniaxial method for design reinforcement for general axis defined by angle.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="Alpha">Angle of axis</param>
            <param name="desUniaxEdgeAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
            <returns>>HashKey - identificator of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementUniaxialAroundGeneralAxis(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Uniaxial method for design reinforcement for general axis defined by angle
            old function with default design add data which was set by SetAddData function
            </summary>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="Alpha">Angle of axis</param>
            <returns>HashKey - identificator of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementUniaxialAroundYAxis(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Uniaxial method for design reinforcement for moment action around y axis of cross-section.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="desUniaxEdgeAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementUniaxialAroundZAxis(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Uniaxial method for design reinforcement for moment action around z axis of cross-section.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="desUniaxEdgeAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementGeneralBiaxial(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Biaxial design of reinforcement - according to formula from EC (Myrd/Medy)^biaxcoef + (Mzrd/zMed)^biaxcoef lesser than 1.0
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="biaxCoef">Vaule of biaxial coefficient - default 1.4</param>
            <param name="desGeneralEdgeAddData">Id of general edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementGeneralBiaxial(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Biaxial design of reinforcement - according to formula from EC (Myrd/Medy)^biaxcoef + (Mzrd/zMed)^biaxcoef lesser than 1.0
            old function with default design add data which was set by SetAddData function
            </summary>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="biaxCoef">Vaule of biaxial coefficient - default 1.4</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementGeneral(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General design of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="desGeneralEdgeAddData">Id of general edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementGeneral(System.Double,System.Double,System.Double)">
            <summary>
            General design of reinforcement
            old function with default design add data which was set by SetAddData function
            </summary>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementCorner(System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>
            Corner design of reinforcement
             </summary>
             <param name="desAddDataID">ID of design add data</param>
             <param name="N">Value of normal force</param>
             <param name="My">Value of bending moment acting around y axis</param>
             <param name="Mz">Value of bending moment acting around z axis</param>
             <param name="desGeneralCornerAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
             <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementCorner(System.Double,System.Double,System.Double)">
             <summary>
            Corner design of reinforcement
             old function with default design add data which was set by SetAddData function
             </summary>
             <param name="N">Value of normal force</param>
             <param name="My">Value of bending moment acting around y axis</param>
             <param name="Mz">Value of bending moment acting around z axis</param>
             <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignUniaxialGenLayers(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General uniaxial method for design reinforcement in layers for general axis defined by angle.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="Alpha">Angle of axis</param>
            <param name="numberOfLayers">Number of wanted layers</param>
            <param name="desUniaxEdgeAddData">Id of uniaxial edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementGeneralBiaxialLayers(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Biaxial design of reinforcement in layers - according to formula from EC (Myrd/Medy)^biaxcoef + (Mzrd/zMed)^biaxcoef lesser than 1.0
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="biaxCoef">Vaule of biaxial coefficient - default 1.4</param>
            <param name="numberOfLayers">Number of wanted layers</param>
            <param name="desGeneralEdgeAddData">Id of general edge add data, if they are not defined use -1.0</param>
            <returns>>HashKey - identificator of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.DesignReinforcementGeneralLayers(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            General design of reinforcement
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="numberOfLayers">Number of wanted layers</param>
            <param name="desGeneralEdgeAddData">Id of general edge add data, if they are not defined use -1.0</param>
            <returns>HashKey - identification of results of design, result - id of error, msg - enum with error</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetNumberOfEdgesOfWholeCrossSection(System.Double)">
            <summary>
            Method returns number of edges of whole cross-section
            </summary>
            <param name="CssID">Id of cross-section</param>
            <returns>number of edges </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetNumberOfEdgesOfWholeCrossSection">
            <summary>
            Method returns number of edges for default cross-section - id = 0
            </summary>
            <returns>number of edges</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetInfoAboutEdgeOfCrossSection(System.Double)">
            <summary>
            Method returns info about edge for default cross-section - id = 0
            </summary>
            <param name="EdgeIndex">index of edge</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetInfoAboutEdgeOfCrossSection(System.Double,System.Double)">
            <summary>
            Method returns info about edge of cross-section
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="EdgeIndex">index of edge</param>
            <returns>index of first point of edge, index of second point of edge, index of edge</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetIndexesOfEdgesWithDesignedReinforcementFromUniaxialDesign(System.Double)">
            <summary>
            Method returns indexes of edges with designed reinforcement from uniaxial design
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <returns>first edge index, second edge index</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.CalculateReinfRatioForEdge(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method calculates ratio of reinforcement for edge for acting load
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="edgeIndex">index of edge</param>
            <param name="N">Value of normal force</param>
            <param name="My">Value of bending moment acting around y axis</param>
            <param name="Mz">Value of bending moment acting around z axis</param>
            <param name="fck">stength of concrete</param>
            <returns>ratio of reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.CreatePracticalCalculator(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method creates practical calculator
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="distance">perpendicular distance from edge</param>
            <param name="diameter">diameter of reinforcement</param>
            <param name="minBarsSpacing">minimal spacing between bars</param>
            <param name="cover">cover of reinforcemement</param>
            <returns>Id of practical calculator - .HashKey, error info</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetAreasOfReinforcementForEdgeForPracticalCalculator(System.Double,System.Collections.IList)">
            <summary>
            Method sets amount of reinforcement for edges for practical calculator
            </summary>
            <param name="keyHash">Id of practical calculator</param>
            <param name="reinfArea">area of reinforcement</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.OptReinfDiamOnEdge(System.Double,System.Double)">
            <summary>
            Method optimizes diameter of reinforcement
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>optimized diameter for edge</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.MaxNumberBarsOnEdge(System.Double,System.Double)">
            <summary>
            Method calculates maximal number of bars
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>maximal number of bars</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.NumberBarsOnEdge(System.Double,System.Double)">
            <summary>
            Method calculates number of bars for edge
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>number of bars</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SpacingReqReinf(System.Double,System.Double)">
            <summary>
            Method calculates spacing of required reinforcement
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>spacing of required reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.LengthOfLineForDesign(System.Double,System.Double)">
            <summary>
            Method calculates length of layer of reinforcement
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <returns>length, start point( y coord, z coord), end point( y coord, z coord),error info</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.AssignReinfToEdge(System.Double,System.Double,System.Double)">
            <summary>
            Method assign reinforcement bar to edge according to coordinates
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="reinfCoordY">y coordinates of point</param>
            <param name="reinfCoordZ">z coordinates of point</param>
            <returns>index of edge, perpendicular distance from edge</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.ArrayReqReinf(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method creates real reinforcement bars from required area via practical calculator
            </summary>
            <param name="keyHashPractCalc">Id of practical calculator</param>
            <param name="edgeIndex">index of edge</param>
            <param name="typeArea">type of area of reinforcement - 0 - round 1 - ceil</param>
            <param name="minNumber">minimal number of bars for edge</param>
            <returns>list of bars (barindex,y coord, z coord, As and diameter) </returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetDifferentDiameterAndCoverForEdges(System.Double,System.Collections.IList)">
            <summary>
            Method sets different diameters and covers for edges of cross-section
            </summary>
            <param name="desAddDataID">ID of design add data</param>
            <param name="AddEdgeData">Aditional edge data</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.CreateRealBarsAfterDesignOfReinf(System.Double)">
            <summary>
            Method sets flag for creation of real bars after design of reinforcement.
            </summary>
            <param name="desAddDataID">ID of design add data</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetPositionOfReinforcementForEdge(System.Double,System.Double)">
            <summary>
            Method return position of reinforcement for edge
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="EdgeIndex">Index of edge</param>
            <returns>y, z coordinate of centre of gravity of designed reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetPositionOfReinforcementForLayerOfEdge(System.Double,System.Double,System.Double)">
            <summary>
            Method return position of reinforcement for layer of edge
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <param name="EdgeIndex">Index of edge</param>
            <param name="layerIndex">Index of layer</param>
            <returns>y, z coordinate of centre of gravity of designed reinforcement</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetHeightOfCompressionZone4DesignedReinf(System.Double)">
            <summary>
            Method return height of compression zone for designed reinforcement
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <returns>x</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetEffectiveHeigthOfCrossSection4DesignedReinf(System.Double)">
            <summary>
            Method returns effective height of cross-section for designed reinforcement
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <returns>d</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.GetInnerLeverArm4DesignedReinf(System.Double)">
            <summary>
            Method returns structure with inner lever arm, inner lever arm above centre of gravity and inner lever arm under centre of gravity
            </summary>
            <param name="HashKey">HashKey obtained form design of reinforcement</param>
            <returns>z,z+,z-</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetAddData(System.Double,System.Double)">
            <summary>
            Old method for initialization of design add data - obsolete
            </summary>
            <param name="Diameter">diemater of reinforcement</param>
            <param name="Cover">cover of reinforcement</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.SetDesignMaterial(System.Collections.Generic.List{System.Object})">
            <summary>
            Old method for set of material diagram of reinforcement - obsolete
            </summary>
            <param name="Diagram">List of material points</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.Designer.XEP_IDesigner.ClearReinfDiagram">
            <summary>
            Old method for clearing of material diagram
            </summary>
        </member>
        <member name="T:Equations4.ConcreteDLL.PlaneDeformation.TPOD">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.EquilibriumPlane">
            <summary>
            Function returns plane of equilibrium (translation in direction x, rotation around y axis and z axis) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.EquilibriumPlane(System.Double,System.Double)">
            <summary>
            Function returns plane of equilibrium (translation in direction x ,rotation around y axis and z axis) 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.CurvatureRes(System.Double,System.Double)">
            <summary>
            Returns the resultant value of curvature of Css  
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>/// 
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.TranslationX(System.Double,System.Double)">
            <summary>
            Returns the translation of Css in direction of x -axis  
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>/// 
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.CurvatureY(System.Double,System.Double)">
            <summary>
            Returns the curvature of Css around y-axis of CSS
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>/// 
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.CurvatureZ(System.Double,System.Double)">
            <summary>
            Returns the curvature of Css around z-axis of CSS
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>/// 
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.HeightOfCompressionZone">
            <summary>
            Function returns depth of compression zone (the distance from most compressive fibre to neutral axis) -value x [m] 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.HeightOfCompressionZone(System.Double,System.Double)">
            <summary>
            Function returns depth of compression zone (the distance from most compressive fibre to neutral axis) -value x [m] 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.BalanceHeighCompressionZone">
            <summary>
            Function returns limit value of depth of compression zone -value xbal [m], if limit strain  of concrete in the most compressive fibre and strain of reinforcement  on the beginning of plastic branch is reached   
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.BalanceHeighCompressionZone(System.Double,System.Double)">
            <summary>
            Function returns limit value of depth of compression zone -value xbal [m], if limit strain  of concrete in the most compressive fibre and strain of reinforcement  on the beginning of plastic branch is reached   
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.LimitHeighCompressionZone">
            <summary>
            Function returns limit value of  depth of compression zone -value xlim[m] , if limit strain  of concrete in the most compressive fibre and limit strain of  the most tensioned reinforcement is reached  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.LimitHeighCompressionZone(System.Double,System.Double)">
            <summary>
            Function returns limit value of  depth of compression zone -value xlim[m] , if limit strain  of concrete in the most compressive fibre and limit strain of  the most tensioned reinforcement is reached  
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.EffectiveHeight(System.Double)">
            <summary>
            Function returns effective depth of cross-section ( distance from the furthermost compressed fibre of cross-section to center of gravity of tensile reinforcement)-value d [m]
            </summary>
            <param name="EffectiveHeightParam"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.EffectiveHeight(System.Double,System.Double,System.Double)">
            <summary>
            Function returns effective depth of cross-section ( distance from the furthermost compressed fibre of cross-section to center of gravity of tensile reinforcement)-value d [m]
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="EffectiveHeightParam"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.InnerLevelArm">
            <summary>
            Function returns  inner level arm-value z [m]  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.InnerLevelArm(System.Double,System.Double)">
            <summary>
            Function returns  inner level arm-value z [m]  
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.AngleOfNeutralAxis">
            <summary>
            Function returns direction of neutral axis (angle between y axis and neutral axis of css s in deg)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.AngleOfNeutralAxis(System.Double,System.Double)">
            <summary>
            Function returns direction of neutral axis (angle between y axis and neutral axis of css s in deg)
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.GetIntersectionPointsCount">
            <summary>
            Function returns intersections points count of neutral axis and concrete cross-section (polygon)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.GetIntersectionPointsCount(System.Double,System.Double)">
            <summary>
            Function returns intersections points count of neutral axis and concrete cross-section (polygon)
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.GetIntersectionPoints">
            <summary>
            Function returns intersections (points with coordinates yi[m] and zi [m]) of neutral axis and concrete cross-section (polygon)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.GetIntersectionPoints(System.Double,System.Double)">
            <summary>
            Function returns intersections (points with coordinates yi[m] and zi [m]) of neutral axis and concrete cross-section (polygon)
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.InnerLeverArmPartPos(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns part of  inner level arm (distance to center of tensile force to center of CSS) -value z+ [m]
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="InnerleverParam">Parameter for calculation when InnerLevelArm is calculoated from formula</param>
            <param name="CalcType">0 = compression force concrete and tensile force reinforcement, 1 = compression force all tensile force all</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.InnerLeverArmPartNeg(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns part of  inner level (distance to center of compressive to center of CSS force) -value z- [m]
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="InnerleverParam">Parameter for calculation when InnerLevelArm is calculoated from formula</param>
            <param name="CalcType">0 = compression force concrete and tensile force reinforcement, 1 = compression force all tensile force all</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.InnerLevelArm4Param(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns  inner level arm-value z [m]  
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="InnerleverParam">Parameter for calculation when InnerLevelArm is calculoated from formula</param>
            <param name="CalcType">0 = compression force concrete and tensile force reinforcement, 1 = compression force all tensile force all</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.TensilePartOfCss(System.Double,System.Double)">
            <summary>
            Function returns polygon (array of point with two columns y[m] and z[m]) of tensile part of cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.PlaneDeformation.TPOD.CompressivePartOfCss(System.Double,System.Double)">
            <summary>
            Function returns polygon (array of point with two columns y[m] and z[m]) of compressive part of cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TCharacteristics">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCharacteristics.Characteristics(Equations4.ConcreteDLL.ConcreteDLL.CharType,Equations4.ConcreteDLL.ConcreteDLL.StiffnessType)">
            <summary>
            Function returns Css characteristics
            </summary>
            <param name="CharType"></param>
            <param name="StiffnessType"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCharacteristics.Characteristics(System.Double,System.Double,Equations4.ConcreteDLL.ConcreteDLL.CharType,Equations4.ConcreteDLL.ConcreteDLL.StiffnessType)">
            <summary>
            Function returns Css characteristics
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="CharType"></param>
            <param name="StiffnessType"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCharacteristics.Characteristics(Equations4.ConcreteDLL.ConcreteDLL.CharType,Equations4.ConcreteDLL.ConcreteDLL.StiffnessType,System.Double,System.Double,System.Double)">
            <summary>
            Function returns Css characteristics
            </summary>
            <param name="CharType"></param>
            <param name="StiffnessType"></param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCharacteristics.Characteristics(System.Double,System.Double,Equations4.ConcreteDLL.ConcreteDLL.CharType,Equations4.ConcreteDLL.ConcreteDLL.StiffnessType,System.Double,System.Double,System.Double)">
            <summary>
            Function returns Css characteristics
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="CharType"></param>
            <param name="StiffnessType"></param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCrackingForce.#ctor(Equations4.ConcreteDLL.Utils.TInterfaceObjectBaseContext)">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCrackingForce.CrackingForces1(System.Double,System.Double,System.Double)">
            <summary>
            Function returns the cracking forces(Ncr1,Mcry1,Mrcz1), when in the most tensile fibre of concrete cross-section is reached inputted tensile strength of the concrete (value fcte,ff)
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="dFcteff">effective tensile strength of concrete, when the crack is created.</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCrackingForce.CrackingForces2(System.Double,System.Double,System.Double)">
            <summary>
            Function returns the cracking forces(Ncr2,Mcry2,Mrcz2), when in the most compressive fibre of concrete cross-section is reached inputted tensile strength of the concrete (value fcte,ff)
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="dFcteff">effective tensile strength of concrete, when the crack is created.</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TDiagnostic">
            <summary>
            Diagnostic functions of concrete toolbox
            </summary>
        </member>
        <member name="T:Equations4.ConcreteDLL.TGeneral">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetCssHeight(System.Double)">
            <summary>
            Function returns dimension of Css
            </summary>
            <param name="RotAngle">angle for calculation dimension of css from y-axis of CSS in deg</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetCssHeight(System.Double,System.Double)">
            <summary>
            Function returns dimension of Css
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="RotAngle">angle for calculation dimension of css from y-axis of CSS in deg</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetCountFibresConcrete">
            <summary>
            Function returns number of concrete fibres in cross-section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetCountFibresConcrete(System.Double)">
            <summary>
            Function returns number of concrete fibres in cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetCountFibresReinforcement">
            <summary>
            Function returns number of non-prestressed bars of reinforcement in cross-section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetCountFibresReinforcement(System.Double)">
            <summary>
            Function returns number of non-prestressed bars of reinforcement in cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetOutline">
            <summary>
            Function returns outline points of Css
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetOutline(System.Double)">
            <summary>
            Function returns outline points of Css
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetFibresConcrete(System.Double)">
            <summary>
            Function returns concrete fibres of Css
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetCsePointPosition(System.Double,System.Double)">
            <summary>
            Function returns concrete shape position for given index
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Point index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetFibrePositionConcrete(System.Double)">
            <summary>
            Function returns concrete fibre position for given index
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetFibrePositionConcrete(System.Double,System.Double)">
            <summary>
            Function returns concrete fibre position for given index
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetReinfBars">
            <summary>
            Function returns non-prestressed bars of reinforcement in cross-section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetReinfBars(System.Double)">
            <summary>
            Function returns number of non-prestressed bars of reinforcement in cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetFibrePositionReinf(System.Double)">
            <summary>
            Function returns position of non-prestressed bar of reinforcement in cross-section
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.GetFibrePositionReinf(System.Double,System.Double)">
            <summary>
            Function returns position of non-prestressed bar of reinforcement in cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.PointInPolygon(System.Collections.IList,System.Double,System.Double)">
            <summary>
            Function returns if point is in polygon
            </summary>
            <param name="Polygon">Points in polygon</param>
            <param name="PointCoordY"></param>
            <param name="PointCoordZ"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.CentreOfPolygon(System.Collections.IList)">
            <summary>
            Function returns position gravity center of polygon
            </summary>
            <param name="Polygon">Points in polygon</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TGeneral.StressFromStrain(System.Collections.IList,System.Double)">
            <summary>
            Function returns value of stress calculated from defines strain-stress diagram and value of the strain
            </summary>
            <param name="StressStrainDaigram">array of  points of stress-strain diagram of the material with two columns (coordinate strain[-] and stress[Pa])</param>
            <param name="Strain">value of strain</param>
            <returns>value of stress calculated from defines strain-stress diagram and value of the strain</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.SetIntDiagramAddData(System.Double,System.Double,System.Double)">
            <summary>
            Method sets basic diagram add data - smoothing of diagram
            </summary>
            <param name="IntDiagAddDataID">Id of diagram add data</param>
            <param name="numberOfPoints">number of points in vertical cut</param>
            <param name="numberOfVerticalDiagram">number of vertical cuts</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.SetExtraRotationPoint(System.Double,System.Double,System.Double)">
            <summary>
             Method set rotation point for interaction diagram which is used during design of reinforcement
            </summary>
            <param name="IntDiagAddDataID">Id of diagram add data</param>
            <param name="heigthRatio">height ratio</param>
            <param name="strainRatio">strain ratio</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.SetMaximalCompressedPortion(System.Double,System.Double)">
            <summary>
            Method set maximal compressed portion for interaction diagram which is used during design of reinforcement
            </summary>
            <param name="IntDiagAddDataID">Id of diagram add data</param>
            <param name="compPortion">compressed portion coefficient</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.InteractionDiagramNM(System.Double,System.Double,System.Double)">
            <summary>
            Method creates 2D plane interaction diagram
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="diagramAngle">angle of interaction diagram cut - 0 - My, 90 - Mz</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>list of projected interaction diagram points (N,M)</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.InteractionDiagramNMyMz(System.Double,System.Double,System.Double)">
            <summary>
            Method creates 3D interaction diagram surface
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="diagramAngle">angle of interaction diagram cut - 0 - My, 90 - Mz</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>list of interaction diagram points (N,My,Mz)</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.CountPointsInteractionDiagram(System.Double,System.Double,System.Double)">
            <summary>
            Method returns number of points of plane interaction diagram points - InteractionDiagramNM
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="diagramAngle">angle of interaction diagram cut - 0 - My, 90 - Mz</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>number of points of interaction diagram</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.CountPointsInteractionDiagramNMyMz(System.Double,System.Double,System.Double)">
            <summary>
            Method returns number of points of plane interaction diagram points - InteractionDiagramNMyMz
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="diagramAngle">angle of interaction diagram cut - 0 - My, 90 - Mz</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>number of points of interaction diagram</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.UltimateBorder3D(System.Double,System.Double,System.Double)">
            <summary>
            Method returns 3D ultimate border surface
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="diagramAngle">angle of interaction diagram cut - 0 - My, 90 - Mz</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>List of points of plane of deformations - eps0, epsy, epsz</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.UltimateBorder(System.Double,System.Double,System.Double)">
            <summary>
            Method returns plane ultimate border
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="diagramAngle">angle of interaction diagram cut - 0 - My, 90 - Mz</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>List of projected points of plane of deformations - eps0, kappa</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.IntersectionsInteractionDiagramNM(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns intersection of plane interaction diagram and ray defined by angle and point
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="diagramAngle">angle of interaction diagram cut - 0 - My, 90 - Mz</param>
            <param name="N">Value of normal forces</param>
            <param name="M">Value of projected bending moment</param>
            <param name="intersectionAngle">angle of cut measured from M axis - Nu = 0°, Mu = 90°</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>number of intersection, first point intersection (N,M), second point intersection (N,M)</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.ResistanceInteractionDiagramNM(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns resistance point obtained from intersection of interaction diagram and ray defined by point (N,M) and angle
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="diagramAngle">angle of interaction diagram cut - 0 - My, 90 - Mz</param>
            <param name="N">Value of normal forces</param>
            <param name="M">Value of projected bending moment</param>
            <param name="intersectionAngle">angle of cut measured from M axis - Nu = 0°, Mu = 90°</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>resistance point - N,M</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.HorizontalSectionInteractionDiagram3D(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns plane horizontal cut obtained from intersection of 3D ID and cut plane defined by point (N,My,Mz)
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="N">Value of normal forces of definition point</param>
            <param name="My">Value of bending moment actiong around y axis  of definition point</param>
            <param name="Mz">Value of bending moment actiong around z axis  of definition point</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>list of points of cut (N, My, Mz)</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.VerticalSectionInteractionDiagram3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns plane vertical cut obtained from intersection of 3D ID and cut plane defined by point (N,My,Mz) and angle
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="N">Value of normal forces of definition point</param>
            <param name="My">Value of bending moment actiong around y axis  of definition point</param>
            <param name="Mz">Value of bending moment actiong around z axis  of definition point</param>
            <param name="sectionAngleHor">angle between cut plane and N,My plane</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>list of points of cut (N, My, Mz)</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.GeneralSectionInteractionDiagram3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns plane general cut obtained from intersection of 3D ID and cut plane defined by point (N,My,Mz) and two angles
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="N">Value of normal forces of definition point</param>
            <param name="My">Value of bending moment actiong around y axis  of definition point</param>
            <param name="Mz">Value of bending moment actiong around z axis  of definition point</param>
            <param name="sectionAngleHor">angle between cut plane and N,My plane</param>
            <param name="sectionAngleVert">angle between cut plane and My,Mz plane</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>list of points of cut (N, My, Mz)</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.CountPointsHorizontalSectionInteractionDiagram3D(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns number of points of horizontal cut obtained from intersection of 3D ID and cut plane defined by point (N,My,Mz)
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="N">Value of normal forces of definition point</param>
            <param name="My">Value of bending moment actiong around y axis  of definition point</param>
            <param name="Mz">Value of bending moment actiong around z axis  of definition point</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>number of points</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.CountPointsVerticalSectionInteractionDiagram3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns number of points of plane vertical cut obtained from intersection of 3D ID and cut plane defined by point (N,My,Mz) and angle
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="N">Value of normal forces of definition point</param>
            <param name="My">Value of bending moment actiong around y axis  of definition point</param>
            <param name="Mz">Value of bending moment actiong around z axis  of definition point</param>
            <param name="sectionAngleHor">angle between cut plane and N,My plane</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>number of points</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.CountPointsGeneralSectionInteractionDiagram3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns number of points of plane general cut obtained from intersection of 3D ID and cut plane defined by point (N,My,Mz) and two angles
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="N">Value of normal forces of definition point</param>
            <param name="My">Value of bending moment actiong around y axis  of definition point</param>
            <param name="Mz">Value of bending moment actiong around z axis  of definition point</param>
            <param name="sectionAngleHor">angle between cut plane and N,My plane</param>
            <param name="sectionAngleVert">angle between cut plane and My,Mz plane</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>number of points/returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.IntersectionsInteractionDiagram3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns intersection points of 3D interaction diagram and ray defined by point and two angels
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="N">Value of normal forces of definition point</param>
            <param name="My">Value of bending moment actiong around y axis  of definition point</param>
            <param name="Mz">Value of bending moment actiong around z axis  of definition point</param>
            <param name="sectionAngleHor">angle between cut plane and N,My plane</param>
            <param name="sectionAngleVert">angle between cut plane and My,Mz plane</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>number of intersections first intersection point (N,My,Mz), second intersection point (N,My,Mz)</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TInteractionDiagram.ResistanceInteractionDiagram3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method returns resistance points obtained from intersection of 3D interaction diagram and ray defined by point and two angels
            </summary>
            <param name="CssID">Id of cross-section</param>
            <param name="N">Value of normal forces of definition point</param>
            <param name="My">Value of bending moment actiong around y axis  of definition point</param>
            <param name="Mz">Value of bending moment actiong around z axis  of definition point</param>
            <param name="sectionAngleHor">angle between cut plane and N,My plane</param>
            <param name="sectionAngleVert">angle between cut plane and My,Mz plane</param>
            <param name="IntDiagAddDataID">Id of diagram add data, use  -1 for default</param>
            <returns>resistance point (N,My,Mz)</returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TModfiAndCreate">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TModfiAndCreate.CopyCrossSection(System.Double,System.Double)">
            <summary>
            Creates copy of Css
            </summary>
            <param name="CssSourceID"></param>
            <param name="CssID"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TModfiAndCreate.ModifyCssWithArrayOfReinforcement(System.Double,System.Collections.IList,System.Double,System.Collections.IList)">
            <summary>
            Modifies Css reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ArrayOfReinforcement">New array of reinforcement (list of TReinfBar)</param>
            <param name="ModifType">DeletePreviousReinf = 0, Add2PreviousReinf = 1</param>
            <param name="ReinfStressStrainDiagram">Stress strain diagram for reinforcement (list of PointD)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TPODForce.#ctor(Equations4.ConcreteDLL.Utils.TInterfaceObjectBaseContext)">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TPODForce.ForcesFromEquilibriumOfPlane(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns internal forces (N,My,Mz) for inputting plane of equilibrium (translation in direction x ,rotation around y axis and z axis) 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="eps0"></param>
            <param name="epsY"></param>
            <param name="epsZ"></param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TRegionData">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TRegionData.RegionArrayOfReinforcement(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns array of reinforcement inside defined region  of the cross-section with the basic properties  - four columns (position y [m], position z [m], diameter [m], area of reinforcement [m2])
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="AngleCutLine">angle of cut line from y-axis of CSS [deg]</param>
            <param name="StripeWidthAboveCutLine">is width of the region above line for cutting of css</param>
            <param name="StripeWidthUnderCutLine">is width of the region under line for cutting of css</param>
            <param name="CoordYCutLine">is y-coordinate of reference point for definition of the line for cutting of css related to point [0,0]</param>
            <param name="CoordZCutLine">is z-coordinate of reference point for definition of the line for cutting of css related to point [0,0]</param>
            <returns>unction returns array of reinforcement inside defined region  of the cross-section with the basic properties  - four columns (position y [m], position z [m], diameter [m], area of reinforcement [m2])</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TRegionData.ArrayOfReinforcement(System.Double)">
            <summary>
            Function returns array of reinforcement in selected cross-section  with the basic properties - four columns (position y [m], position z [m], diameter [m], area of reinforcement [m2])
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TRegionData.RegionCharacteristicCon(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function for calculation of  basic css characteristic of part of concrete cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="AngleCutLine">angle of cut line from y-axis of CSS [deg]</param>
            <param name="CoordYCutLine">is y-coordinate of reference point for definition of the line for cutting of css related to point [0,0]</param>
            <param name="CoordZCutLine">is z-coordinate of reference point for definition of the line for cutting of css related to point [0,0]</param>
            <param name="StripeWidthAboveCutLine">is width of the region above line for cutting of css</param>
            <param name="StripeWidthUnderCutLine">is width of the region under line for cutting of css</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TRegionData.RegionCharacteristicReinf(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function for calculation of  basic css characteristic of reinforcement inside of part of cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="AngleCutLine">angle of cut line from y-axis of CSS [deg]</param>
            <param name="CoordYCutLine">is y-coordinate of reference point for definition of the line for cutting of css related to point [0,0]</param>
            <param name="CoordZCutLine">is z-coordinate of reference point for definition of the line for cutting of css related to point [0,0]</param>
            <param name="StripeWidthAboveCutLine">is width of the region above line for cutting of css</param>
            <param name="StripeWidthUnderCutLine">is width of the region under line for cutting of css</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TRegionData.CssCharacteristicCon(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns the basic cross-section characteristics (ty,tz, A, Iy, Iz, Sy, Sz, Dyz, u) of concrete cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TRegionData.CssCharacteristicReinf(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns the basic cross-section characteristics (ty,tz, A, Iy, Iz, Sy, Sz, Dyz, u) of non-prestressed reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TRegionData.RegionCharacteristicTransf(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function for calculation of  basic transformed Css characteristic of part of cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="AngleCutLine">angle of cut line from y-axis of CSS [deg]</param>
            <param name="CoordYCutLine">is y-coordinate of reference point for definition of the line for cutting of css related to point [0,0]</param>
            <param name="CoordZCutLine">is z-coordinate of reference point for definition of the line for cutting of css related to point [0,0]</param>
            <param name="StripeWidthAboveCutLine">is width of the region above line for cutting of css</param>
            <param name="StripeWidthUnderCutLine">is width of the region under line for cutting of css</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TShear">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.EffectiveHeigthProjection(System.Double,System.Double,System.Double)">
            <summary>
            Function returns effective depth of Css recalculated to defined direction drec [m]
            </summary>
            <param name="CalcMode">Unused param</param>
            <param name="RotAngle">angle from y axis of css  to which value d will be recalculated [deg]</param>
            <param name="EffectHeithParam">coefficient for calculation effective depth, if this value can not be calculated from plane of deformation, d =x*h</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.EffectiveHeigthProjection(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns effective depth of Css recalculated to defined direction drec [m]
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="RotAngle">angle from y axis of css  to which value d will be recalculated [deg]</param>
            <param name="EffectHeithParam">coefficient for calculation effective depth, if this value can not be calculated from plane of deformation, d =x*h</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.InnerleverArmProjection(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns inner lever arm of Css recalculated to defined direction zrec [m]
            </summary>
            <param name="CalcMode">Unused param</param>
            <param name="RotAngle">angle from y axis of css  to which value d will be recalculated [deg]</param>
            <param name="InnerLeverParam">coefficient for calculation inner lever arm, if this value can not be calculated from plane of deformation, zcal =InnerLeverParam*dcal</param>
            <param name="CalcType">type of calculation inner lever arm (0 =inner lever arm is calculated from eccentricity of forces in compressive concrete and in tensile reinforcement,1=inner lever arm is  calculated from eccentricity of all compresive forces and all tensile forces)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.InnerleverArmProjection(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns inner lever arm of Css recalculated to defined direction zrec [m]
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="RotAngle">angle from y axis of css to which value is recalculated [deg]</param>
            <param name="InnerLeverParam">coefficient for calculation inner lever arm, if this value can not be calculated from plane of deformation, zcal =InnerLeverParam*dcal</param>
            <param name="CalcType">type of calculation inner lever arm (0 =inner lever arm is calculated from eccentricity of forces in compressive concrete and in tensile reinforcement,1=inner lever arm is  calculated from eccentricity of all compresive forces and all tensile forces)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.WidthCssGeneral(System.Double,System.Double,System.Double)">
            <summary>
            Function returns dimension of cross-section in inputted direction crossing the inputted point 
            </summary>
            <param name="WidthPointY">is y-coordinate of reference point for definition of the line for calculation dimension of css  related to point [0,0]</param>
            <param name="WidthPointZ">is z-coordinate of reference point for definition of the line for calculation dimension of css  related to point [0,0]</param>
            <param name="RotAngle">angle for calculation dimension of css from y-axis of CSS in deg</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.CssDimension(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns dimension of cross-section in inputted direction crossing the inputted point with influence of holes !!
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="WidthPointY">is y-coordinate of reference point for definition of the line for calculation dimension of css  related to point [0,0]</param>
            <param name="WidthPointZ">is z-coordinate of reference point for definition of the line for calculation dimension of css  related to point [0,0]</param>
            <param name="RotAngle">angle for calculation dimension of css from y-axis of CSS in deg</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.ShearForceResultant(System.Double,System.Double)">
            <summary>
            Function calculate and returns resultant of shear force VEd = (VEdy^2 + VEdz^2)^0.5
            </summary>
            <param name="VdEy">shear force in direction of y-axis of css</param>
            <param name="VdEz">shear force in direction of z-axis of css</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.AngleShearForceResultant(System.Double,System.Double)">
            <summary>
            Function  returns angle of shear force resultant from y-axis of css 
            </summary>
            <param name="VdEy">shear force in direction of y-axis of css</param>
            <param name="VdEz">shear force in direction of z-axis of css</param>
            <returns>angle of shear force resultant from y-axis of css [deg]</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.InnerLeverArmPartPosProjection(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns part of  inner level (distance to center of tensile force to center of CSS)  recalculated to defined direction -value zrec+ [m]
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="RotAngle">angle from y axis of css to which value is recalculated [deg]</param>
            <param name="InnerLeverParam">coefficient for calculation inner lever arm, if this value can not be calculated from plane of deformation, zcal =InnerLeverParam*dcal</param>
            <param name="CalcType">type of calculation inner lever arm (0 =inner lever arm is calculated from eccentricity of forces in compressive concrete and in tensile reinforcement,1=inner lever arm is  calculated from eccentricity of all compresive forces and all tensile forces)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.InnerLeverArmPartNegProjection(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns part of  inner level arm (distance to center of compressive to center of CSS) force  recalculated to defined direction -value zrec+ [m]
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="RotAngle">angle from y axis of css to which value is recalculated [deg]</param>
            <param name="InnerLeverParam">coefficient for calculation inner lever arm, if this value can not be calculated from plane of deformation, zcal =InnerLeverParam*dcal</param>
            <param name="CalcType">type of calculation inner lever arm (0 =inner lever arm is calculated from eccentricity of forces in compressive concrete and in tensile reinforcement,1=inner lever arm is  calculated from eccentricity of all compresive forces and all tensile forces)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.WidthCssForShear(System.Double,System.Double,System.Double)">
            <summary>
            Function returns the minimum width of cross-section in selected area perpendicular to resultant of shear  force -bw[m]
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="TypeOfArea">is type of area , when the minimum width is calculated (0 - in tension area of the concrete, 1 =  area between resultant of force in compressive concrete and tensile reinforcement , it means within inner lever arm).</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TShear.PositionWidthCssForShear(System.Double,System.Double,System.Double)">
            <summary>
            Function returns distance from the center of cross-section, where value  WidthCssForShear is calculated
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="TypeOfArea">is type of area , when the minimum width is calculated (0 - in tension area of the concrete, 1 =  area between resultant of force in compressive concrete and tensile reinforcement , it means within inner lever arm).</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TSpacingCover">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TSpacingCover.CoverReinf(System.Double,System.Double,System.Double)">
            <summary>
            Function returns minimum distance of the all or selected reinforcement bar from nearest the edge of cross-section in defined direction. The direction is defined by the angle (for example straight line in direction of  plane of deformation).
            </summary>
            <param name="CSIndex">ID of cross-section</param>
            <param name="DirAngle">angle for calculation cover from y-axis of CSS in deg</param>
            <param name="BarIndex">is index of bar for which the concrete cover will be calculated (if BarIndex=-1, the minimum cover from all bars of reinforcement will be calculated)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TSpacingCover.MaxSpacingReinfCrack(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Is for crack calculation
            Function returns maximum center to center spacing of non-prestressed bars for defined type of reinforcement and direction
            function selects correct reinf. layer in which it calculates spacing
            </summary>
            <param name="CSIndex">ID of cross-section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="ReinfType">type of reinforcement (0 =all reinforcement,1=only tensile reinforcement,2=only compressive reinforcement)</param>
            <param name="DirType"> is direction of edges, for which the distance will be checked (0=bars at edges in all direction,1=bars at edges in direction of y axis of css,bars at edges in direction of z axis of css)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TSpacingCover.MaxSpacingReinf(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns maximum center to center spacing of non-prestressed bars for defined type of reinforcement and direction
            </summary>
            <param name="CSIndex">ID of cross-section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="ReinfType">type of reinforcement (0 =all reinforcement,1=only tensile reinforcement,2=only compressive reinforcement)</param>
            <param name="DirType"> is direction of edges, for which the distance will be checked (0=bars at edges in all direction,1=bars at edges in direction of y axis of css,bars at edges in direction of z axis of css)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TSpacingCover.MinSpacingReinf(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns minimum clear spacing (spacing between surfaces of bars) of non-prestressed bars for defined type of reinforcement and direction
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="ReinfType">type of reinforcement (0 =all reinforcement,1=only tensile reinforcement,2=only compressive reinforcement)</param>
            <param name="DirType"> is direction of edges, for which the distance will be checked (0=bars at edges in all direction,1=bars at edges in direction of y axis of css,bars at edges in direction of z axis of css)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TSpacingCover.ReinfSpacingInfo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns minimum clear spacing (spacing between surfaces of bars) of non-prestressed bars for defined type of reinforcement and direction
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="ReinfType">type of reinforcement (0 =all reinforcement,1=only tensile reinforcement,2=only compressive reinforcement)</param>
            <param name="DirType"> is direction of edges, for which the distance will be checked (0=bars at edges in all direction,1=bars at edges in direction of y axis of css,bars at edges in direction of z axis of css)</param>
            <param name="ExtremeType"> type of extreme ( if ExtremeType=0 then maximum, else mininmum)</param>
            <param name="DistanceType"> type of distance ( if DistanceType=0 then distance is center to center, else distance is surface to surface)</param>/// 
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TStirrup">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStirrup.CreateStirrup(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Object})">
            <summary>
            Function creates stirrup and returns index of stirrup, if stirrup was created
            </summary>
            <param name="StirrupID">ID of stirrup, which will be created</param>
            <param name="Diameter">diametre of stirrup dss</param>
            <param name="AngleStirrup">angle of stirrup [deg] from horizontal axis -axis x of the member</param>
            <param name="DistanceOfStirrup">is centre-to centre spacing of stirrup  s [m] in direction of member axis - axis x</param>
            <param name="StirrupFyk">characteristic yield strength of shear reinforcement [Pa]</param>
            <param name="ArrayPointsStirrup">array of points of stirrup vertexes with two columns (coordinate y[m] and z[m])</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStirrup.NumberOfStirrupLinks(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Function returns number of stirrup links (intersection of stirrups link with the cut line)
            </summary>
            <param name="StirrupID">ID of stirrup</param>
            <param name="PointCoordY"> is y-coordinate of reference point for definition of the cut line  of css related to point [0,0]</param>
            <param name="PointCoordZ"> is z-coordinate of reference point for definition of the cut line  of css related to point [0,0],</param>
            <param name="Angle">angle of cut line  from y-axis of CSS in deg</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TStirrupAsw">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStirrupAsw.ClearStirrupZones">
            <summary>
            Clears all inputed zones
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStirrupAsw.CreateStirrupZone(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function creates stirrup zones and returns index of zone, if zone was created
            </summary>
            <param name="ZoneID">ID of stirrup zone, which will be created</param>
            <param name="Xbeg">is x coordinate of begin point of the zone on the member (in direction of member axis)</param>
            <param name="Xend">is x coordinate of the the end point of the zone on the member (in directionof member axis) </param>
            <param name="NumberOfStirrupLinks">number of stirrup links (if NumberOfStirrupLinks = 0, the number of stirrup links will be calcuated automatically with using function NumberOfStirrupLinks, else defined value will be taken into account )</param>
            <param name="ShapeOfStirrup"> array of  points of stirrup vertexes with three columns (coordinate y[m], z[m], ID of stirrup shape)</param>
            <param name="PositionOfStirrup"> array of  with 4 column (position of stirrup in zone from Xbeg [m], diamater of stirrup [m], angle of stirrup from x axis of the member [rad],number of stirrup at defined position )</param>
            <param name="Fywk">is characteristic yield strength of shear reinforcement</param>
            <param name="Angle4AutoStirrupLinks">angle from y axis of css [deg], for calculation number of cuts (is taken into account only for NumberOfStirrupLinks = 0)</param>
            <param name="PointX4AutoStirrupLinks">x coordination, for calculation number of cuts (is taken into account only for NumberOfStirrupLinks = 0)</param>
            <param name="PointY4AutoStirrupLink">y coordination, for calculation number of cuts (is taken into account only for NumberOfStirrupLinks = 0)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStirrupAsw.StirrupsAroundSection(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The function returns array of stirrups, which are inside defined length around section with following columns( ZoneID, position of stirrup x [m], diamater of stirrup  [m], angle of stirrup from x axis of the member [rad],number of stirrup at defined position, distance between stirrups ss [m], number of stirrup links ns [], fywk [Pa])
            </summary>
            <param name="Xsection"> is position of section on the member (in direction of member axis - x axis) </param>
            <param name="DeltaL">is length of zone on the left side from the section [m] ( stirrups inside of the zone will beb taken into account for defined section</param>
            <param name="DeltaR">is length of zone on the rigth side from the section [m] ( stirrups inside of the zone will beb taken into account for defined section)</param>
            <param name="ZoneID"> is stirrup zone ID (if ZoneID = 0, all defined zones will be taken into account, else only defined zone will be taken into account)</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStirrupAsw.StirrupsCharInSection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The function returns basic stirrup characteristic of the stirrups stirrups, which are inside defined length around section with following columns
            </summary>
            <param name="Xsection"> is position of section on the member (in direction of member axis - x axis) </param>
            <param name="DeltaL">is length of zone on the left side from the section [m] ( stirrups inside of the zone will beb taken into account for defined section</param>
            <param name="DeltaR">is length of zone on the rigth side from the section [m] ( stirrups inside of the zone will beb taken into account for defined section)</param>
            <param name="ZoneID"> is stirrup zone ID (if ZoneID = 0, all defined zones will be taken into account, else only defined zone will be taken into account)</param>
            <param name="CalcMethod"> is method for calculation of stirrup characteristic (0 = for calculation is used geometrical avarage based on area of shear reinforcement,1 = for calculation is used geometrical avarage based on area of shear reinforcement, where distance of stirrup from the section is taken into account )</param>
            <param name="IsisFirstOrLastSection">Defines if section is first or last</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TStressStrain">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetCountFibresConcrete">
            <summary>
            Function returns number of concrete fibers in cross-section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetCountFibresConcrete(System.Double)">
            <summary>
            Function returns number of concrete fibers in cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreComponentIDConcrete(System.Double,System.Double)">
            <summary>
            Function returns componentID for fibre
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="fibreIndex">Id of fibreIndex</param>/// 
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetCountFibresReinforcement">
            <summary>
            Function returns number of non-prestressed bars of reinforcement in cross-section
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetCountFibresReinforcement(System.Double)">
            <summary>
            Function returns number of non-prestressed bars of reinforcement in cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStrainOfConcreteMax">
            <summary>
            Function returns  maximum value of strain from all concrete fibres
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStrainOfConcreteMax(System.Double,System.Double)">
            <summary>
            Function returns  maximum value of strain from all concrete fibres
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStrainOfConcreteMin">
            <summary>
            Function returns  minimum value of strain from all concrete fibres
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStrainOfConcreteMin(System.Double,System.Double)">
            <summary>
            Function returns  minimum value of strain from all concrete fibres
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStrainOfReinfMax">
            <summary>
            Function returns  maximum value of strain from all non-prestressed bars of reinforcement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStrainOfReinfMax(System.Double,System.Double)">
            <summary>
            Function returns  maximum value of strain from all non-prestressed bars of reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStrainOfReinfMin">
            <summary>
            Function returns  minimum value of strain from all non-prestressed bars of reinforcement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStrainOfReinfMin(System.Double,System.Double)">
            <summary>
            Function returns  minimum value of strain from all non-prestressed bars of reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStressOfConcreteMax">
            <summary>
            Function returns maximum value of stress from all concrete fibres
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStressOfConcreteMax(System.Double,System.Double)">
            <summary>
            Function returns maximum value of stress from all concrete fibres
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStressOfConcreteMin">
            <summary>
            Function returns minimum value of stress from all concrete fibres
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStressOfConcreteMin(System.Double,System.Double)">
            <summary>
            Function returns minimum value of stress from all concrete fibres
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStressOfReinfMax">
            <summary>
            Function returns maximum value of stress from all non-prestressed bars of reinforcement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStressOfReinfMax(System.Double,System.Double)">
            <summary>
            Function returns maximum value of stress from all non-prestressed bars of reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStressOfReinfMin">
            <summary>
            Function returns minimum value of stress from all non-prestressed bars of reinforcement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetExtremeStressOfReinfMin(System.Double,System.Double)">
            <summary>
            Function returns minimum value of stress from all non-prestressed bars of reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreExtremeStrainMax">
            <summary>
            Function returns index of concrete fibre , where is maximum value of strain
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreExtremeStrainMax(System.Double,System.Double)">
            <summary>
            Function returns index of concrete fibre , where is maximum value of strain
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreExtremeStrainMin">
            <summary>
            Function returns index of concrete fibre , where is minimum value of strain
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreExtremeStrainMin(System.Double,System.Double)">
            <summary>
            Function returns index of concrete fibre , where is minimum value of strain
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreExtremeStressMax">
            <summary>
            Function returns index of concrete fibre , where is maximum value of stress
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreExtremeStressMax(System.Double,System.Double)">
            <summary>
            Function returns index of concrete fibre , where is maximum value of stress
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreExtremeStressMin">
            <summary>
            Function returns index of concrete fibre , where is minimum value of stress
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibreExtremeStressMin(System.Double,System.Double)">
            <summary>
            Function returns index of concrete fibre , where is minimum value of stress
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibrePositionConcrete(System.Double)">
            <summary>
            Function returns concrete fibre position for given index
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibrePositionConcrete(System.Double,System.Double)">
            <summary>
            Function returns concrete fibre position for given index
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibrePositionReinf(System.Double)">
            <summary>
            Function returns non-prestressed bar position for given index
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFibrePositionReinf(System.Double,System.Double)">
            <summary>
            Function returns non-prestressed bar position for given index
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetLimitStrainOfConcrete(System.Double)">
            <summary>
            Function returns limit value of strain in selected concrete fibre
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetLimitStrainOfConcrete(System.Double,System.Double)">
            <summary>
            Function returns limit value of strain in selected concrete fibre
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetLimitStrainOfReinf(System.Double)">
            <summary>
            Function returns limit value of stain in selected non-prestressed bar of reinforcement
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetLimitStrainOfReinf(System.Double,System.Double)">
            <summary>
            Function returns limit value of stain in selected non-prestressed bar of reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetLimitStressOfConcrete(System.Double)">
            <summary>
            Function returns limit value of stress in selected concrete fibre
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetLimitStressOfConcrete(System.Double,System.Double)">
            <summary>
            Function returns limit value of stress in selected concrete fibre
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetLimitStressOfReinf(System.Double)">
            <summary>
            Function returns limit value of stress in selected non-prestressed bar of reinforcement
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetLimitStressOfReinf(System.Double,System.Double)">
            <summary>
            Function returns limit value of stress in selected non-prestressed bar of reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetReinfExtremeStrainMax">
            <summary>
            Function returns index of non-prestressed bar of reinforcement, where is maximum value of strain
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetReinfExtremeStrainMax(System.Double,System.Double)">
            <summary>
            Function returns index of non-prestressed bar of reinforcement, where is maximum value of strain
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetReinfExtremeStrainMin">
            <summary>
            Function returns index of non-prestressed bar of reinforcement, where is minimum value of strain
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetReinfExtremeStrainMin(System.Double,System.Double)">
            <summary>
            Function returns index of non-prestressed bar of reinforcement, where is minimum value of strain
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetReinfExtremeStressMax">
            <summary>
            Function returns index of non-prestressed bar of reinforcement, where is maximum value of stress
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetReinfExtremeStressMax(System.Double,System.Double)">
            <summary>
            Function returns index of non-prestressed bar of reinforcement, where is maximum value of stress
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetReinfExtremeStressMin">
            <summary>
            Function returns index of non-prestressed bar of reinforcement, where is minimum value of stress
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetReinfExtremeStressMin(System.Double,System.Double)">
            <summary>
            Function returns index of non-prestressed bar of reinforcement, where is minimum value of stress
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetStrainOfConcrete(System.Double)">
            <summary>
            Function returns value of strain in selected concrete fibre 
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetStrainOfConcrete(System.Double,System.Double,System.Double)">
            <summary>
            Function returns value of strain in selected concrete fibre 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetStrainOfReinf(System.Double)">
            <summary>
            Function returns value of stain in selected non-prestressed bar of reinforcement
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetStrainOfReinf(System.Double,System.Double,System.Double)">
            <summary>
            Function returns value of stain in selected non-prestressed bar of reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetStressOfConcrete(System.Double)">
            <summary>
            Function returns value of stress in selected concrete fibre 
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetStressOfConcrete(System.Double,System.Double,System.Double)">
            <summary>
            Function returns value of stress in selected concrete fibre 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetStressOfReinf(System.Double)">
            <summary>
            Function returns value of stress in selected non-prestressed bar of reinforcement
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetStressOfReinf(System.Double,System.Double,System.Double)">
            <summary>
            Function returns value of stress in selected non-prestressed bar of reinforcement
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFiberReinfDiameter(System.Double)">
            <summary>
            Function returns bar diameter for non-prestressed bar index
            </summary>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TStressStrain.GetFiberReinfDiameter(System.Double,System.Double)">
            <summary>
            Function returns bar diameter for non-prestressed bar index
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Index">Fibre index</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TArea">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TArea.CompressedConcrete(Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns area of concrete in compression
            </summary>
            <param name="CharType">Unused param</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TArea.CompressedConcrete(System.Double,System.Double)">
            <summary>
            Returns area of concrete in compression
            </summary>
            <param name="CSIndex"></param>
            <param name="ForceIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TArea.TensionConcrete(Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns area of concrete in tension
            </summary>
            <param name="CharType">Unused param</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TArea.TensionConcrete(System.Double,System.Double)">
            <summary>
            Returns area of concrete in tension
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TArea.CompressedReinf(Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns area of non-prestressed bars in compression
            </summary>
            <param name="CharType">Unused param</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TArea.CompressedReinf(System.Double,System.Double)">
            <summary>
            Returns area of non-prestressed bars in compression
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TArea.TensionReinf(Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns area of non-prestressed bars in tension
            </summary>
            <param name="CharType">Unused param</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TArea.TensionReinf(System.Double,System.Double)">
            <summary>
            Returns area of non-prestressed bars in tension
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TCenterOfGravity">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.Outline">
            <summary>
            Returns center of gravity 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.CompressedConcrete(Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CharType">Unused param</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.CompressedConcrete(System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.CompressedConcrete(Equations4.ConcreteDLL.ConcreteDLL.CharType,System.Double,System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CharType">Unused param</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.CompressedConcrete(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.TensionConcrete(Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CharType">Unused param</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.TensionConcrete(System.Double,System.Double,Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="CharType"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.TensionConcrete(Equations4.ConcreteDLL.ConcreteDLL.CharType,System.Double,System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CharType">Unused param</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.TensionConcrete(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.CompressedReinf(Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CharType">Unused param</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.CompressedReinf(System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.CompressedReinf(Equations4.ConcreteDLL.ConcreteDLL.CharType,System.Double,System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CharType">Unused param</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.CompressedReinf(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.TensionReinf(Equations4.ConcreteDLL.ConcreteDLL.CharType)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CharType">Unused param</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.TensionReinf(System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.TensionReinf(Equations4.ConcreteDLL.ConcreteDLL.CharType,System.Double,System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CharType">Unused param</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TCenterOfGravity.TensionReinf(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns center of gravity 
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="CSCH_dy_Center">is y-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_dz_Center">is z-coordinate of reference point for calculation related to point [0,0]</param>
            <param name="CSCH_alfa_rotation">angle from y axis of css to which value cs characteristics will be recalculated [deg]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.#ctor(Equations4.ConcreteDLL.Utils.TInterfaceObjectBaseContext)">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.CompressedConcrete">
            <summary>
            Function returns resultant forces in compression concrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.CompressedConcrete(System.Double,System.Double)">
            <summary>
            Function returns resultant forces in compression concrete
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.TensionConcrete">
            <summary>
            Function returns resultant forces in tension concrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.TensionConcrete(System.Double,System.Double)">
            <summary>
            Function returns resultant forces in tension concrete
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.WholeConcrete">
            <summary>
            Function returns resultant forces in concrete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.WholeConcrete(System.Double,System.Double)">
            <summary>
            Function returns resultant forces in concrete
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.CompressedReinf">
            <summary>
            Function returns resultant force in compression non-prestressed bars
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.CompressedReinf(System.Double,System.Double)">
            <summary>
            Function returns resultant force in compression non-prestressed bars
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.TensionReinf">
            <summary>
            Function returns resultant force in tension non-prestressed bars
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.TensionReinf(System.Double,System.Double)">
            <summary>
            Function returns resultant force in tension non-prestressed bars
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.WholeReinf">
            <summary>
            Function returns resultant force in non-prestressed bars
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.WholeReinf(System.Double,System.Double)">
            <summary>
            Function returns resultant force in non-prestressed bars
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.Resultant">
            <summary>
            Function returns resultant force in whole Css
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TResponse.Resultant(System.Double,System.Double)">
            <summary>
            Function returns resultant force in whole Css
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="ForceIndex">Id of forces for calculation</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.TTorsion">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.ParameterUkFromEffRectCss(System.Double,System.Double)">
            <summary>
            Function returns value uk calculated for effective rectangular cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="EffectWallThickness">Effective wall thickenss</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.ParameterAkFromEffRectCSS(System.Double,System.Double)">
            <summary>
            Function returns value Ak calculated for effective rectangular cross-section
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="EffectWallThickness">Effective wall thickenss</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.ParameterUkFromTorGenCss(System.Double)">
            <summary>
            Function returns value uk[m] (perimeter of center-line of general cross-section for torsion, created by function CreateGeneralCssForTorsion)  
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.ParameterAkFromTorGenCss(System.Double)">
            <summary>
            Function returns value Ak[m^2] (area enclosed by  center-line of general cross-section for torsion, created by function CreateGeneralCssForTorsion) for check torsion
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.AdditionalStrainReinf(System.Double,System.Double)">
            <summary>
            Returns max. strain in reinforcement for Css with linear diagram, and only inputed axial force
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="AddTensionForce"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.ParameterUkFromPolygon(System.Collections.Generic.List{System.Object})">
            <summary>
            Function returns value uk[m] (perimeter of defined polygon) for check torsion 
            </summary>
            <param name="PolygonPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.ParameterAkFromPolygon(System.Collections.Generic.List{System.Object})">
            <summary>
            Function returns value Ak[m^2] (area enclosed by defined polygon) for check torsion 
            </summary>
            <param name="PolygonPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.CreateEffRectCssForTorsion(System.Double,System.Double)">
            <summary>
            Function creates  rectangular concrete cross-section to perimeter and area of target and source css were same  and retursn ID of cross-section  
            </summary>
            <param name="CssIDTarget">Id of target Css</param>
            <param name="CssIDSource">Id of source Css</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.CreateGeneralCssForTorsion(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns  polygon (array of point - y[m] and z[m] coordinate) of thin-walled cross-section for torsion according to selecting type (0-outer polygon, 1-center line polygon, 2-inner polygon)
            </summary>
            <param name="CssIDTarget">Id of target Css</param>
            <param name="CssIDSource">Id of source Css</param>
            <param name="EffectWallThickness">Effective wall thickenss</param>
            <param name="StirrupID">Id of stirrup</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.PolygonCssForTorsion(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function returns  polygon (array of point - y[m] and z[m] coordinate) of thin-walled cross-section for torsion according to selecting type (0-outer polygon, 1-center line polygon, 2-inner polygon)
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="EffectWallThickness">Effective wall thickenss</param>
            <param name="PolygonType">(0-outer polygon, 1-center line polygon, 2-inner polygon)</param>
            <param name="StirrupID">Id of stirrup</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.LongReinAreaForTorsion(System.Double,System.Double,System.Double)">
            <summary>
            Function returns area of longitudinal reinforcement enclosed by stirrup and inside of  defined strip from the  edge of the stirrup for torsion
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="StirrupID">Id of stirrup</param>
            <param name="StripeWidth">Width of stripe</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.TTorsion.MinDistReinfInsideStirrup(System.Double,System.Double,System.Double)">
            <summary>
            Function returns minimum distance between edge of the cross-section and center of bar of longitudinal reinforcement enclosed by selected stirrup and inside define stripe from the edge of stirrup
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="StirrupID">Id of stirrup</param>
            <param name="StripeWidth">Width of stripe</param>
            <returns></returns>
        </member>
        <member name="P:Equations4.ConcreteDLL.Utils.CEdgeSelectionSettingIn.EdgeSelectionAngle">
            <summary>
            angle in deg, for edge exclusion (default is PI/6)
            </summary>
        </member>
        <member name="T:Equations4.ConcreteDLL.Utils.CAddEdgeData">
            <summary>
            CAddEdgeData
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CAddEdgeData.Index">
            <summary>
            Index of egde 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CAddEdgeData.Ypos">
            <summary>
            Y-coordinate of position for design of reinforcement 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CAddEdgeData.Zpos">
            <summary>
            Z-coordinate of position for design of reinforcement 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CAddEdgeData.ReinfRatio">
            <summary>
            Ratio of reinforcement for each edge 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CEP_SortMultiForceIn.DesAddDataID">
            <summary>
            ID  additional design data 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CEP_SortMultiForceIn.ForceIndexSource">
            <summary>
            ID of array of internal forces 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CEP_SortMultiForceIn.ForceIndexDestination">
            <summary>
            ID of array of internal forces 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CEP_SortMultiForceIn.TypeDesign">
            <summary>
            Type of design 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CEP_SortMultiForceIn.SymmetrciReinf">
            <summary>
             boolean value for determination, if the designed reinforcement will be symmetric or not 
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CEP_SortMultiForceOut.Result">
            <summary>
            Design result
            </summary>
        </member>
        <member name="T:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn.eTypeDesign">
            <summary>
            Method used for design of the reinforcement
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn.DesAddDataID">
            <summary>
            ID  additional design data 
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn.SetForceIndex">
            <summary>
            ID of array of internal forces 
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn.TypeDesign">
            <summary>
            Type of design 
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn.MaxNLayers">
            <summary>
            maximum number of layers , which can be taken into account. If design for layers will not be taken into account, the value 0 has to be set 
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn.SymmetrciReinf">
            <summary>
             boolean value for determination, if the designed reinforcement will be symmetric or not 
            </summary>
        </member>
        <member name="P:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceIn.SortForce">
            <summary>
             boolean value for determination, if force under SetForceIndex will be sorted for design
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceOut.Result">
            <summary>
            Design result
            </summary>
        </member>
        <member name="F:Equations4.ConcreteDLL.Utils.CEP_DesignReinf4MultiForceOut.HashKey">
            <summary>
            Id of results
            </summary>
        </member>
        <member name="T:Equations4.ConcreteDLL.Utils.CEP_DesignCalculatinoInfoGeneralInput.eDesignCalculationInfoMode">
            <summary>
            eDesignCalculationInfoMode
            </summary>
        </member>
        <member name="T:Equations4.ConcreteDLL.Utils.TFactory">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateTShapeOfStirrupItem(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="pointY">coordinate y[m]</param>
            <param name="pointZ">coordinate z[m]</param>
            <param name="stirrupLinkID">ID of stirrup shape</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateTPositionOfStirrupItem(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="angleOfStirrupFromAxisX">angle of stirrup from x axis of the member [rad]</param>
            <param name="numberOfStirrupInDefinedSection">number of stirrup at defined position</param>
            <param name="stirrupDiam">diamater of stirrup [m]</param>
            <param name="xPosFromZoneBeg">position of stirrup in zone from Xbeg [m]</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateSortMultiForceIn(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="DesAddDataID"></param>
            <param name="ForceIndexSource"></param>
            <param name="ForceIndexSourceDestination"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateDesignReinf4MultiForceIn(System.Double,System.Double)">
            <summary>
            Create objecet for input 'CONCRETE.Designer.DesignMultiReinforcement'.
            </summary>
            <param name="DesAddDataID">ID of design add data for multi for design</param>
            <param name="ForceIndex">Id of forces array for calculation</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateMultiDesignResultKey(System.Double,System.Double)">
            <summary>
            Create objecet for input 'CONCRETE.Designer.GetDesignedReinfMulti'.
            </summary>
            <param name="edgeInx">index of edge index we want data for</param>
            <param name="layerInx">index of layer we want data for</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateAddEdgeData(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="IndexOfEdge">Index of egde </param>
            <param name="Ypos">Y-coordinate of position for design of reinforcement</param>
            <param name="Zpos">Z-coordinate of position for design of reinforcement</param>
            <param name="ReinfRatio">Ratio of reinforcement for each edge </param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateAddEdgeData(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="IndexOfEdge">Index of egde </param>
            <param name="ReinfRatio">Ratio of reinforcement for each edge </param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateAddCornerData(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="IndexOfCorner">Index of corner </param>
            <param name="Ypos">Y-coordinate of position for design of reinforcement</param>
            <param name="Zpos">Z-coordinate of position for design of reinforcement</param>
            <param name="ReinfRatio">Ratio of reinforcement for each edge </param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateLoadForce(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Force for calculation
            </summary>
            <param name="N">Normal force</param>
            <param name="Vy">Shear force in Y-axis direction</param>
            <param name="Vz">Shear force in Z-axis direction</param>
            <param name="Mx">Torsion moment</param>
            <param name="My">Bending moment around Y-axis</param>
            <param name="Mz">Bending moment around Z-axis</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.Utils.TFactory.CreateLoadForce(System.Double,System.Double,System.Double)">
            <summary>
            Force for calculation
            </summary>
            <param name="N">Normal force</param>
            <param name="My">Bending moment around Y-axis</param>
            <param name="Mz">Bending moment around Z-axis</param>
            <returns></returns>
        </member>
        <member name="T:Equations4.ConcreteDLL.ConcreteDLL">
            <summary>
            Concrete toolbox
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.Init(Equations4.TTraceInfo)">
            <summary>
            Init all members in this method
            </summary>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.SetForces(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set forces for Id 0
            </summary>
            <param name="N">Normal force</param>
            <param name="Vy">Shear force in Y-axis direction</param>
            <param name="Vz">Shear force in Z-axis direction</param>
            <param name="Mx">Torsion moment</param>
            <param name="My">Bending moment around Y-axis</param>
            <param name="Mz">Bending moment around Z-axis</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.SetForcesId(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set force for specific Id
            </summary>
            <param name="ForceIndex">Id of forces for calculation</param>
            <param name="N">Normal force</param>
            <param name="Vy">Shear force in Y-axis direction</param>
            <param name="Vz">Shear force in Z-axis direction</param>
            <param name="Mx">Torsion moment</param>
            <param name="My">Bending moment around Y-axis</param>
            <param name="Mz">Bending moment around Z-axis</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.SetArrayForcesId(System.Double,System.Collections.IList)">
            <summary>
            Set forces array for specific Id
            </summary>
            <param name="ForceIndex">Id of forces array for calculation</param>
            <param name="forces">forces array</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.GetArrayForce(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="ArrayIndex">Id of forces array</param>
            <param name="ForceIndex">Id of forces index in array</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.SetBiaxialCoef(System.Double,System.Collections.IList)">
            <summary>
            Function set biaxil cofficients for forces
            </summary>
            <param name="ForceArrayIndex">Id of forces array for calculation</param>
            <param name="BiaxCoefs">Array of biaxical coeficients</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.ExistsCSinToolBox(System.Double)">
            <summary>
            Test if crossSection already exists in toolbox
            </summary>
            <param name="cssID">ID of crossSection</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.CreateCS(System.Collections.IList,System.Collections.IList)">
            <summary>
            Initialize cross-section in ConcreteToolbox library. If Css is not created then returns -1
            </summary>
            <param name="Polygon">Shape of concrete cross section</param>
            <param name="ConcreteDiagram">Material diagram of concrete</param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.CreateCS(System.Double,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initialize cross-section in ConcreteToolbox library. If Css is not created then returns -1
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="Polygon"></param>
            <param name="ConcreteDiagram"></param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.CreateCS(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initialize cross-section in ConcreteToolbox library. If Css is not created then returns -1
            </summary>
            <param name="_Polygon"></param>
            <param name="_ConcreteDiagram"></param>
            <param name="_ReinfBars"></param>
            <param name="_ReinfDiagram"></param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.CreateCS(System.Double,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initialize cross-section in ConcreteToolbox library. If Css is not created then returns -1
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="_Polygon"></param>
            <param name="_ConcreteDiagram"></param>
            <param name="_ReinfBars"></param>
            <param name="_ReinfDiagram"></param>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.CreateCS(System.Double,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Function creates reinforced cross-section or part of reinforced cross-section and return ID of cross-section). If Css is not created then returns -1
            </summary>
            <param name="CSIndex">ID of cross-section</param>
            <param name="ConCss">array of  concrete polygon with two columns (coordinate y[m] and z[m])</param>
            <param name="ConStressStrainDiagram">array of point of stress-strain diagram of concrete with two columns (coordinate strain[-] and stress[Pa])</param>
            <param name="ArrayReinfBars">array of  bars of non-prestressed reinforcemnet with three columns (coordinate y[m] ,coordinate z[m], diamter of reinf [m])</param>
            <param name="ReinfStressStrainDiagram">array of  point of stress-strain diagram of all non-pretsressed rein. with two columns (coordinate strain[-] and stress[Pa])</param>
            <param name="ArrayPointsRegion">array of region (part of cross-section) for evaluation results with two columns (coordinate y[m] and z[m])</param>
            <returns>Function creates reinforced cross-section or part of reinforced cross-section and returns ID of cross-section)</returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.CreateRegionFromCss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function create region(part of CSS) and returns array of points (coordinate y[m] and z[m]) of this region recalculated to center of gravity of css.
            Css is unmodified !
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="StripeCenterY">Stripe center Y coordination</param>
            <param name="StripeCenterZ">Stripe center Z coordination</param>
            <param name="StripeDirAngle">Stripe direction in [degrees]</param>
            <param name="StripeDimMax">Stripe width</param>
            <param name="StripeDimMin">Stripe width</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.CreateRegionFromCss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function create region(part of CSS) and returns array of points (coordinate y[m] and z[m]) of this region recalculated to center of gravity of css.
            Css is unmodified !
            </summary>
            <param name="CSIndex">Id of cross section</param>
            <param name="StripeCenterY">Stripe center Y coordination</param>
            <param name="StripeCenterZ">Stripe center Z coordination</param>
            <param name="StripeDirAngle">Stripe direction in [degrees]</param>
            <param name="StripeDimMax">Stripe width</param>
            <param name="StripeDimMin">Stripe width</param>
            <param name="AlfaRotation"></param>
            <param name="MoveY"></param>
            <param name="MoveZ"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.ConcreteDLL.ConcreteDLL.CreateRegionOfCrossSection(System.Double,System.Double,System.Collections.Generic.List{System.Object})">
            <summary>
            Function creates cross section with shape of 'ArrayPointsRegion'
            </summary>
            <param name="CssIDTarget">New cross section Id</param>
            <param name="CssIDSource">Source cross section Id</param>
            <param name="ArrayPointsRegion">New shape of cross section</param>
            <returns></returns>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPInput.SlabPointsArray">
            <summary>
            Points specifying shape of the slab
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPInput.CssPointsArray">
            <summary>
            Points specifying shape of the cross section
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPInput.CssShapeType">
            <summary>
            Specifies the shape type of the cross section (eCircle or eRectangle)
            This information is used in the perimeter tool algorithm
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPInput.Offset">
            <summary>
            Offset for the inner perimeter (ePerimInner type)
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPInput.SegmentTestDiameter">
            <summary>
            Diameter of testing circle used in Segments Criterion calculation (u_out diameter)
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPerimeter.Type">
            <summary>
            Type of the perimeter:
            
            Inner perimeter is css shape offsetted by the Offset value
            Other perimeters are inner perimeter 'perpendiculary cracked' to some slab edges
            
             ePerimUndefined - empty perimeter
             ePerimInner - inner perimeter
             ePerimEdge -  connected to only one edge  (one curve)
             ePerimCorner - connected to two neighbour edges (one curve)
             ePerimOppositeEdges - connected to some non-neighbour (opposite) edges (one curve)
             ePerimOppositeEdgesSegment -two ePerimOppositeEdges curves combined together (two curves)
            
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPerimeter.Length">
            <summary>
            Length of the perimeter curve (without the slab edges)
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPerimeter.Curves">
            <summary>
            Perimeter curves. For ePerimOppositeEdgesSegment, there are two curves, other perimeters has one curve
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPerimeter.Area">
            <summary>
            Area of the perimeter
            
            Area is specified with the loop consiting of the perimeter curves and slab edges, which contains the cross section.
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPerimeter.CssModul">
            <summary>
            Perimeter Cross section module, which is calculated:
            
            (distance of CurveCentroid and CssCetroid ) * (Length of the perimeter curve)
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPerimeter.CurveCentroid">
            <summary>
            Centroid of the curve
            </summary>
        </member>
        <member name="M:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.IXEP_CPCalculator.Calculate(Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.Abstract.IXEP_CPInput)">
            <summary>
            Method calculates all control perimeters for specified input and returns the results
            </summary>
            <param name="input">client inputs</param>
            <returns>IXEP_CPResults - results</returns>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.XEP_ICPResults.CalcResult">
            <summary>
            Calculation result
            </summary>
        </member>
        <member name="P:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.XEP_ICPResults.SegmentsCriterion">
            <summary>
            Result of the segments criterion calculation
            
            Calculation checks the testing circle around the css centre (with the user inputed diameter)
            If there are 5 or more intersections with the slab border -> segments criterion = false;
            If there are less intersections -> segments criterion = true;
            
            true - perimeters of the 'ePerimOppositeEdges' type should not be taken into account, instead 'ePerimOppositeEdgesSegment' are  physically correct
            false - perimeters of the 'ePerimOppositeEdgesSegment' type should not be taken into account, instead 'ePerimOppositeEdges' are physically correct
            </summary>
        </member>
        <member name="M:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.XEP_ICPResults.GetMinimalPerimeter">
            <summary>
            Gets the perimeter with the minimal Length of it's curve
            
            Result is dependent on the SegmentsCriterion value, if
            SegmentsCriterion = true:  perimeters of 'ePerimOppositeEdges' type are not considered in GetMinimalPerimeter() method
            SegmentsCriterion = false: all perimeters are consider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.XEP_ICPResults.GetMinimalPerimeter(Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.ePerimeterType)">
            <summary>
            Gets the perimeter with the minimal Length of it's curve, 
            only perimeters with the specified 'type' are considered
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.BuiltInObjects.ConcreteDLL.ControlPerimeter.XEP_ICPResults.GetAllPerimeters">
            <summary>
            Gets all calculated perimeters
            </summary>
        </member>
        <member name="T:Equations4.TEWN">
            <summary>
            Class EWN (Error, Warning, Note) contains functions for handling run-time errors, warnings and notes
            </summary>
        </member>
        <member name="M:Equations4.TEWN.TraceEWN(System.String)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <returns>Internal return value</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceEWN(System.String,System.String)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="Param">Parameter defining inline string placed to the message</param>
            <returns>Internal return value</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceEWN(System.String,System.Boolean,System.Boolean)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="PrintDescription">Set TRUE to print EWN description</param>
            <param name="PrintSolution">Set TRUE to print EWN solution</param>
            <returns>Internal return value</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceEWN(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="PrintDescription">Set TRUE to print EWN description</param>
            <param name="PrintSolution">Set TRUE to print EWN solution</param>
            <param name="Param">Parameter defining inline string placed to the message</param>
            <returns>Internal return value</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceEWN(System.String,System.Double)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="Width">Width of the bounding rectangle.</param>
            <returns>Internal return value.</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceEWN(System.String,System.Double,System.String)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="Width">Width of the bounding rectangle.</param>
            <param name="Param">Parameter defining inline string placed to the message</param>
            <returns>Internal return value.</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceEWN(System.String,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="PrintType">Set TRUE to print type of EWN item.</param>
            <param name="PrintDescription">Set TRUE to print EWN description</param>
            <param name="PrintSolution">Set TRUE to print EWN solution</param>
            <param name="Width">Width of the bounding rectangle.</param>
            <returns>Internal return value</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceEWN(System.String,System.Boolean,System.Boolean,System.Boolean,System.Double,System.String)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="PrintType">Set TRUE to print type of EWN item.</param>
            <param name="PrintDescription">Set TRUE to print EWN description</param>
            <param name="PrintSolution">Set TRUE to print EWN solution</param>
            <param name="Width">Width of the bounding rectangle.</param>
            <param name="Param">Parameter defining inline string placed to the message</param>
            <returns>Internal return value</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceRectEWN(System.String,System.Double)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="Width">Width of the bounding rectangle.</param>
            <returns>Internal return value.</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceRectEWN(System.String,System.Double,System.String)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="Width">Width of the bounding rectangle.</param>
            <param name="Param">Parameter defining inline string placed to the message</param>
            <returns>Internal return value.</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceRectEWN(System.String,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="PrintType">Set TRUE to print type of EWN item.</param>
            <param name="PrintDescription">Set TRUE to print EWN description</param>
            <param name="PrintSolution">Set TRUE to print EWN solution</param>
            <param name="Width">Width of the bounding rectangle.</param>
            <returns>Internal return value</returns>
        </member>
        <member name="M:Equations4.TEWN.TraceRectEWN(System.String,System.Boolean,System.Boolean,System.Boolean,System.Double,System.String)">
            <summary>
            Trace error, warning or note to the log.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="PrintType">Set TRUE to print type of EWN item.</param>
            <param name="PrintDescription">Set TRUE to print EWN description</param>
            <param name="PrintSolution">Set TRUE to print EWN solution</param>
            <param name="Width">Width of the bounding rectangle.</param>
            <param name="Param">Parameter defining inline string placed to the message</param>
            <returns>Internal return value</returns>
        </member>
        <member name="M:Equations4.TEWN.GetType(System.String)">
            <summary>
            Return type of the EWN item
            </summary>
            <param name="Code">Code of the EWN item.</param>
            <returns>Type of the EWN item.</returns>
        </member>
        <member name="M:Equations4.TEWN.GetDescription(System.String)">
            <summary>
            Returns description of EWN with given code.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <returns>Description of EWN with given code</returns>
        </member>
        <member name="M:Equations4.TEWN.GetDescription(System.String,System.String)">
            <summary>
            Returns description of EWN with given code.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="LangCode">Windows code of required language</param>
            <returns>Description of EWN with given code</returns>
        </member>
        <member name="M:Equations4.TEWN.GetSolution(System.String)">
            <summary>
            Returns solution of EWN with given code.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <returns>Solution of EWN with given code</returns>
        </member>
        <member name="M:Equations4.TEWN.GetSolution(System.String,System.String)">
            <summary>
            Returns solution of EWN with given code.
            </summary>
            <param name="Code">Code of the error, warning or note</param>
            <param name="LangCode">Windows code of required language</param>
            <returns>Solution of EWN with given code</returns>
        </member>
        <member name="M:Equations4.TEWN.DrawTable">
            <summary>
            Draw table of errors, warnings and notes
            </summary>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.DrawTable(System.Int32)">
            <summary>
            Draw table of errors, warnings and notes
            </summary>
            <param name="Count">Number of EWN which are going to be exported to the table (counting from the back).</param>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.DrawTable(System.Int32,System.Int32)">
            <summary>
            Draw table of errors, warnings and notes
            </summary>
            <param name="From">Index of first EWN which is going to be exported to the table</param>
            <param name="To">Index of last EWN which is going to be exported to the table</param>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.DrawTable(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draw table of errors, warnings and notes
            </summary>
            <param name="PrintNum">Set TRUE to add index column.</param>
            <param name="PrintTyp">Set TRUE to add EWN type column.</param>
            <param name="PrintDes">Set TRUE to add EWN description column.</param>
            <param name="PrintSol">Set TRUE to add EWN solution column.</param>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.DrawTable(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draw table of errors, warnings and notes
            </summary>
            <param name="From">Index of first EWN which is going to be exported to the table</param>
            <param name="To">Index of last EWN which is going to be exported to the table</param>
            <param name="PrintNum">Set TRUE to add index column.</param>
            <param name="PrintTyp">Set TRUE to add EWN type column.</param>
            <param name="PrintDes">Set TRUE to add EWN description column.</param>
            <param name="PrintSol">Set TRUE to add EWN solution column.</param>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.GetTable">
            <summary>
            Return table of errors, warnings and notes
            </summary>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.GetTable(System.Int32)">
            <summary>
            Return table of errors, warnings and notes
            </summary>
            <param name="Count">Number of EWN which are going to be exported to the table (counting from the back).</param>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.GetTable(System.Int32,System.Int32)">
            <summary>
            Return table of errors, warnings and notes
            </summary>
            <param name="From">Index of first EWN which is going to be exported to the table</param>
            <param name="To">Index of last EWN which is going to be exported to the table</param>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.GetTable(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns table of errors, warnings and notes
            </summary>
            <param name="PrintNum">Set TRUE to add index column.</param>
            <param name="PrintTyp">Set TRUE to add EWN type column.</param>
            <param name="PrintDes">Set TRUE to add EWN description column.</param>
            <param name="PrintSol">Set TRUE to add EWN solution column.</param>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="M:Equations4.TEWN.GetTable(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Return table of errors, warnings and notes
            </summary>
            <param name="From">Index of first EWN which is going to be exported to the table</param>
            <param name="To">Index of last EWN which is going to be exported to the table</param>
            <param name="PrintNum">Set TRUE to add index column.</param>
            <param name="PrintTyp">Set TRUE to add EWN type column.</param>
            <param name="PrintDes">Set TRUE to add EWN description column.</param>
            <param name="PrintSol">Set TRUE to add EWN solution column.</param>
            <returns>Table of errors, warnings and notes</returns>
        </member>
        <member name="T:Equations4.TLinq">
            <summary>
            Language-Integrated Query (LINQ) contains set of functions for work with arrays/lists/collections 
            </summary>
        </member>
        <member name="M:Equations4.TLinq.Max(System.Collections.IEnumerable)">
            <summary>
            Computes the maximum value of a sequence of numeric values.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <returns>The maximum of the sequence of values.</returns>
        </member>
        <member name="M:Equations4.TLinq.Max(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Computes the maximum value of a sequence of elements converted by lambda expression to numeric value.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="selector">Operation which will be applied on each element of the collection.</param>
            <returns>The maximum of the sequence of values.</returns>
        </member>
        <member name="M:Equations4.TLinq.MaxMember(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Return member with max property
            </summary>
            <param name="List">List of members to iterated</param>
            <param name="selector">Definition of property used to identify extreme member</param>
            <returns>Member with max property</returns>
        </member>
        <member name="M:Equations4.TLinq.Min(System.Collections.IEnumerable)">
            <summary>
            Computes the minimum value of a sequence of numeric values.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <returns>The minimum of the sequence of values.</returns>
        </member>
        <member name="M:Equations4.TLinq.Min(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Computes the minimum value of a sequence of elements converted by lambda expression to numeric value.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="selector">Operation which will be applied on each element of the collection.</param>
            <returns>The minimum of the sequence of values.</returns>
        </member>
        <member name="M:Equations4.TLinq.MinMember(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Return member with min property
            </summary>
            <param name="List">List of members to iterated</param>
            <param name="selector">Definition of property used to identify extreme member</param>
            <returns>Member with min property</returns>
        </member>
        <member name="M:Equations4.TLinq.Sum(System.Collections.IEnumerable)">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <returns>The sum of the sequence of values.</returns>
        </member>
        <member name="M:Equations4.TLinq.Sum(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Computes the sum of a sequence of elements converted by lambda expression to numeric value.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="selector">Operation which will be applied on each element of the collection.</param>
            <returns>The sum of the sequence of values.</returns>
        </member>
        <member name="M:Equations4.TLinq.Average(System.Collections.IEnumerable)">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Equations4.TLinq.Average(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Computes the average of a sequence of elements converted by lambda expression to numeric value.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="selector">Operation which will be applied on each element of the collection.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:Equations4.TLinq.Select(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Projects each element of a sequence into a new form defined by selector.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="selector">Operation which will be applied on each element of the collection.</param>
            <returns>An array whose elements are the result of invoking the transform function on each element of source.</returns>
        </member>
        <member name="M:Equations4.TLinq.Where(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="predicate"> A function to test each element for a condition.</param>
            <returns>An array that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:Equations4.TLinq.Contains(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Determines whether a sequence contains a element matching comparer criteria.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="comparer">Condition  describing requested element.</param>
            <returns>TRUE if the source sequence contains an element that satisfies a specified condition; otherwise FALSE.</returns>
        </member>
        <member name="M:Equations4.TLinq.First(System.Collections.IEnumerable)">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <returns>Returns the first element of a sequence.</returns>
        </member>
        <member name="M:Equations4.TLinq.First(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>Returns the first element in a sequence that satisfies a specified condition.</returns>
        </member>
        <member name="M:Equations4.TLinq.FirstOrDefault(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</returns>
        </member>
        <member name="M:Equations4.TLinq.Last(System.Collections.IEnumerable)">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <returns>Returns the last element of a sequence.</returns>
        </member>
        <member name="M:Equations4.TLinq.Last(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>Returns the last element of a sequence that satisfies a specified condition.</returns>
        </member>
        <member name="M:Equations4.TLinq.LastOrDefault(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Returns the last element of the sequence that satisfies a condition or a default value if no such element is found.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>Returns the last element of the sequence that satisfies a condition or a default value if no such element is found.</returns>
        </member>
        <member name="M:Equations4.TLinq.OrderBy(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a selector.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="selector">Operation which will be applied on each element of the collection.</param>
            <returns>An array whose elements are sorted in ascending order according to the selector.</returns>
        </member>
        <member name="M:Equations4.TLinq.OrderByDescending(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Sorts the elements of a sequence in descending order according to a selector.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="selector">Operation which will be applied on each element of the collection.</param>
            <returns>An array whose elements are sorted in descending order according to the selector.</returns>
        </member>
        <member name="M:Equations4.TLinq.Skip(System.Collections.IEnumerable,System.Double)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <param name="Count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An array that contains the elements that occur after the specified index in the input sequence.</returns>
        </member>
        <member name="M:Equations4.TLinq.Distinct(System.Collections.IEnumerable)">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <param name="List">Collection of elements on which the operation will be applied.</param>
            <returns>An array that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:Equations4.TLinq.ConcatLists(System.Collections.IEnumerable,System.Func{System.Object,System.Object})">
            <summary>
            Concat list of lists into one sequence
            </summary>
            <param name="Lists">List of enumerable sequences (list of lists)</param>
            <param name="selector">Selector applied to each list in the sequence </param>
            <returns>Sequence of all elemetns in all lists.</returns>
        </member>
        <member name="M:Equations4.TLinq.ToList(System.Collections.IEnumerable)">
            <summary>
            Convert IEnumerable sequence to the list
            </summary>
            <param name="List">Enumerable sequence of objects to be converted to the list.</param>
            <returns>List of objects from the sequence</returns>
        </member>
        <member name="T:Equations4.SystemFunctions">
            <summary>
            System functions
            </summary>
        </member>
        <member name="M:Equations4.SystemFunctions.POWER(System.Double,System.Double)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="Base">A double-precision floating-point number to be raised to a power.</param>
            <param name="Exponent">A double-precision floating-point number that specifies a power.</param>
            <returns>The number x raised to the power y.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.SIN(System.Double)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="Angle">An angle, measured in degrees.</param>
            <returns>The sine of angle. If angle is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.SINH(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="Angle">An angle, measured in degrees.</param>
            <returns>The hyperbolic sine of value. If value is equal to NegativeInfinity, PositiveInfinity, or NaN, this method returns a Double equal to value.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.COS(System.Double)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="Angle">An angle, measured in degrees.</param>
            <returns>The cosine of angle. If angle is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.COSH(System.Double)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="Angle">An angle, measured in degrees.</param>
            <returns>The hyperbolic cosine of value. If value is equal to NegativeInfinity or PositiveInfinity, PositiveInfinity is returned. If value is equal to NaN, NaN is returned.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.TG(System.Double)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="Angle">An angle, measured in degrees.</param>
            <returns>The tangent of angle. If angle is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.TGH(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="Angle">An angle, measured in degrees.</param>
            <returns>The hyperbolic tangent of value. If value is equal to NegativeInfinity, this method returns -1. If value is equal to PositiveInfinity, this method returns 1. If value is equal to NaN, this method returns NaN.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.COTH(System.Double)">
            <summary>
            Returns the cotangent of the specified angle.
            </summary>
            <param name="Angle">An angle, measured in degrees.</param>
            <returns>The cotangent of angle. If angle is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ABS(System.Double)">
            <summary>
            Returns the absolute value of a specified number.
            </summary>
            <param name="Value">A number that is greater than or equal to Double.MinValue, but less than or equal to Double.MaxValue.</param>
            <returns>A double-precision floating-point number, x, such that 0 ≤ x ≤ Double.MaxValue.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.SQRT(System.Double)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="Value">The number whose square root is to be found.</param>
            <returns>The positive square root of Value.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.LN(System.Double)">
            <summary>
            Returns the natural (base 'e') logarithm of a specified number.
            </summary>
            <param name="Value">The number whose logarithm is to be found.</param>
            <returns>The natural logarithm of Value</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.LOG(System.Double)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="Value">A number whose logarithm is to be found.</param>
            <returns>The base 10 log of Value.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.LOG(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="Value">The number whose logarithm is to be found.</param>
            <param name="Base">The base of the logarithm.</param>
            <returns>Returns the logarithm of a specified number in a specified base.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.SUM(System.Double[])">
            <summary>
            Returns sum of given numeric parameters.
            </summary>
            <param name="Values">Numeric expressions</param>
            <returns>Sum of given expressions</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.AVERAGE(System.Double[])">
            <summary>
            Returns arithmetic averarge of given numeric parameters.
            </summary>
            <param name="Values">Numeric expressions</param>
            <returns>Arithmetic average of given expressions</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.MIN(System.Double[])">
            <summary>
            Returns the smallest of given numbers.
            </summary>
            <param name="Values">Array of numbers.</param>
            <returns>Returns the smallest of given numbers</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.MAX(System.Double[])">
            <summary>
            Returns the biggest of given numbers.
            </summary>
            <param name="Values">Array of numbers.</param>
            <returns>Returns the biggest of given numbers</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.PARMIN(System.Double[])">
            <summary>
            Returns the smallest of given numbers. Draw vertical stack of given formulas to output.
            </summary>
            <param name="Values">Array of numbers.</param>
            <returns>Returns the smallest of given numbers</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.PARMAX(System.Double[])">
            <summary>
            Returns the biggest of given numbers. Draw vertical stack of given formulas to output.
            </summary>
            <param name="Values">Array of numbers.</param>
            <returns>Returns the biggest of given numbers</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.CEILING(System.Double)">
            <summary>
            Returns number rounded up, away from zero, to the nearest integer.
            </summary>
            <param name="Value">Value to be rounded</param>
            <returns>Number rounded up, away from zero, to the nearest integer</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.CEILING(System.Double,System.Double)">
            <summary>
            Returns number rounded up, away from zero, to the nearest multiple of significance.
            </summary>
            <param name="Value">Value to be rounded</param>
            <param name="Significance">Multiple to which you want to round.</param>
            <returns>Number rounded up, away from zero, to the nearest multiple of significance</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.FLOOR(System.Double)">
            <summary>
            Returns number rounded down, away from zero, to the nearest integer.
            </summary>
            <param name="Value">Value to be rounded</param>
            <returns>Number rounded down, away from zero, to the nearest integer</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.FLOOR(System.Double,System.Double)">
            <summary>
            Returns number rounded down, away from zero, to the nearest multiple of significance.
            </summary>
            <param name="Value">Value to be rounded</param>
            <param name="Significance">Multiple to which you want to round.</param>
            <returns>Number rounded down, away from zero, to the nearest multiple of significance</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUND(System.Double)">
            <summary>
            Rounds a numeric value to the nearest integet.
            </summary>
            <param name="Value">A double-precision number to be rounded.</param>
            <returns>The nearest integer value.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUND(System.Double,System.Int32)">
            <summary>
            Rounds a numeric value to a specified number of fractional digits.
            </summary>
            <param name="Value">A double-precision number to be rounded.</param>
            <param name="Decimals">The number of decimal places in the return value.</param>
            <returns>The nearest decimal value with given number of decimals.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUND(System.Double,System.Int32,System.String)">
            <summary>
            Rounds a numeric value to a specified number of fractional digits. Value is expressed in given physical units.
            </summary>
            <param name="Value">A double-precision number to be rounded.</param>
            <param name="Decimals">The number of decimal places in the return value.</param>
            <param name="Unit">Physical unit, in which the value is expressed</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUNDUP(System.Double)">
            <summary>
            Rounds a numeric value UP to the nearest integet.
            </summary>
            <param name="Value">A double-precision number to be rounded.</param>
            <returns>The nearest higher integer value.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUNDUP(System.Double,System.Int32)">
            <summary>
            Rounds a numeric value UP to a specified number of fractional digits.
            </summary>
            <param name="Value">A double-precision number to be rounded.</param>
            <param name="Decimals">The number of decimal places in the return value.</param>
            <returns>The nearest bigger decimal value with given number of decimals.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUNDUP(System.Double,System.Int32,System.String)">
            <summary>
            Rounds a numeric value UP to a specified number of fractional digits. Value is expressed in given physical units.
            </summary>
            <param name="Value">A double-precision number to be rounded.</param>
            <param name="Decimals">The number of decimal places in the return value.</param>
            <param name="Unit">Physical unit, in which the value is expressed</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUNDDOWN(System.Double)">
            <summary>
            Rounds a numeric value DOWN to the nearest integet.
            </summary>
            <param name="Value">A double-precision number to be rounded.</param>
            <returns>The nearest lower integer value.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUNDDOWN(System.Double,System.Int32)">
            <summary>
            Rounds a numeric value DOWN to a specified number of fractional digits.
            </summary>
            <param name="Value">A double-precision floating-point number to be rounded.</param>
            <param name="Decimals">A double-precision floating-point number to be rounded.</param>
            <returns>The nearest lower decimal value with given number of decimals.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ROUNDDOWN(System.Double,System.Int32,System.String)">
            <summary>
            Rounds a numeric value DOWN to a specified number of fractional digits. Value is expressed in given physical units.
            </summary>
            <param name="Value">A double-precision number to be rounded.</param>
            <param name="Decimals">The number of decimal places in the return value.</param>
            <param name="Unit">Physical unit, in which the value is expressed</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.SystemFunctions.DIV(System.Double,System.Double)">
            <summary>
            Calculates the quotient of two 32-bit signed integers.
            </summary>
            <param name="I1">The dividend.</param>
            <param name="I2">The divisor.</param>
            <returns>The quotient of the specified numbers.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.MOD(System.Double,System.Double)">
            <summary>
            Returns the remainder of two 32-bit signed integers.
            </summary>
            <param name="I1">The dividend.</param>
            <param name="I2">The divisor.</param>
            <returns>The remainder of the specified numbers.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ARCSIN(System.Double)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="Value">A number representing a sine, where d must be greater than or equal to -1, but less than or equal to 1.</param>
            <returns>Angle in degrees. A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ARCCOS(System.Double)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="Value">A number representing a cosine, where d must be greater than or equal to -1, but less than or equal to 1.</param>
            <returns>Angle in degrees. A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ARCTG(System.Double)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="Value">A number representing a tangent.</param>
            <returns>An angle, θ, measured in degrees, such that -π/2 ≤ θ ≤ π/2. Returns -π/2 if d is NegativeInfinity, or π/2 if d equals PositiveInfinity.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ARCTG(System.Double,System.Double)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="X">The X coordinate of a point.</param>
            <param name="Y">The Y coordinate of a point.</param>
            <returns>An angle, measured in degrees, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.COMPARE(System.Object,System.Object)">
            <summary>
            Compares two specified objects, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="O1">First object to compare</param>
            <param name="O2">Second object to compare</param>
            <returns>-1..First is less; 0..Object are the same; 1..First is greater; 2..Object can not be compared</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.COMPARE(System.Object,System.Object,System.Double)">
            <summary>
            
            </summary>
            <param name="O1">First object to compare</param>
            <param name="O2">Second object to compare</param>
            <param name="Precision">Precision used to compare numeric values. Values are considered to be same, if relative difference is less than 1+Power(10, -Precision). Presision=3 => difference is less than 1.001 </param>
            <returns>-1..First is less; 0..Object are the same; 1..First is greater; 2..Object can not be compared</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.LinInterp(System.Double,System.Drawing.Point[])">
            <summary>
            Linear interpolation on a set of data points (x0, y0), (x1, y1), ..., (xn, yn). Function returns concatenation of linear interpolants between each pair of data points.
            </summary>
            <param name="X">X value for linear interpolation.</param>
            <param name="Points">Set of data points (x0, y0), (x1, y1), ..., (xn, yn).</param>
            <returns>Linear interpolation on a set of data points.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.LinExtrap(System.Double,Equations4.PointD,Equations4.PointD)">
            <summary>
            Linear extrapolation on line specified by Point1 and Point2
            </summary>
            <param name="X">X-coordinate of extrapolated value</param>
            <param name="Point1">First point defining the extrapolation line</param>
            <param name="Point2">Second point defining the extrapolation line</param>
            <returns>Linear extrapolation on the given line, at location X</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.PointFromLine(System.Object,System.Object,System.Object)">
            <summary>
            Returns distance from given point to line defined by two points.
            </summary>
            <param name="Point">Point. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="L1">First point on the line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="L2">Second point on the lint. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <returns>Distance from the given point to the line in plain XY.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.CUnit(System.Double,System.String)">
            <summary>
            Convert given value from source to target unit
            </summary>
            <param name="Value">Value to be converted</param>
            <param name="TargetUnit">Unit to which the value should be transferred</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.SystemFunctions.CUnit(System.Double,System.String,System.String)">
            <summary>
            Convert given value from source to target unit
            </summary>
            <param name="Value">Value to be converted</param>
            <param name="TargetUnit">Unit to which the value should be transferred</param>
            <param name="SourceUnit">Initial unit of the value</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.SystemFunctions.GetLength(System.Object)">
            <summary>
            Return length of given array (list).
            </summary>
            <param name="IList">Array whose length is to be measured.</param>
            <returns>Return length of given array, or -1 for non-array types.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.IsNaN(System.Double)">
            <summary>
            Returns a value that indicates whether the specified value is not a number (NaN).
            </summary>
            <param name="Value">A double-precision floating-point number.</param>
            <returns>true if d evaluates to NaN; otherwise, false.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.IsInfinity(System.Double)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity
            </summary>
            <param name="Value">Value to test</param>
            <returns>true if d evaluates to PositiveInfinity or NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.IsNegativeInfinity(System.Double)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="Value">Value to test</param>
            <returns>true if d evaluates to NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.IsPositiveInfinity(System.Double)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="Value">Value to test</param>
            <returns>true if d evaluates to PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.IsNullOrWhiteSpace(System.Double)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="Value">String to test</param>
            <returns>true if the value parameter is null or String.Empty, or if value consists exclusively of white-space characters. </returns>
        </member>
        <member name="M:Equations4.SystemFunctions.IsNullOrEmpty(System.Double)">
            <summary>
            Indicates whether the specified string is null or an Empty string.
            </summary>
            <param name="Value">String to test</param>
            <returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.Description(System.String)">
            <summary>
            Returns description of variable with given name. Description is automatically translated to the selected language.
            </summary>
            <param name="VariableName">Name of variable</param>
            <returns>Description of variable translated to active language</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.Val(System.Double,System.Int32)">
            <summary>
            Reformats numeric input to required output with given precision.
            </summary>
            <param name="D">Input numeric value or expression.</param>
            <param name="Precision">Output precision.</param>
            <returns>Returns input numeric value/expression.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.LowIndex(System.String)">
            <summary>
            Convert given string to lower index
            </summary>
            <param name="Value">String value to be converted to lower index.</param>
            <returns>Value converted to lower index.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.UpIndex(System.String)">
            <summary>
            Convert given string to upper index
            </summary>
            <param name="Value">String value to be converted to upper index.</param>
            <returns>Value converted to upper index.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.RenameVar(System.Object,System.String)">
            <summary>
            Change DrawName of given variable to the value defined by the second parameter.
            </summary>
            <param name="Variable">Variable whose DrawName is to be changed.</param>
            <param name="NewDrawName">New DrawName of the variable.</param>
            <returns>New DrawName of the variable.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.TR(System.String)">
            <summary>
            Return the translation of the message to the current language
            </summary>
            <param name="Message">Message to be translated</param>
            <returns>Translated message (if available) or the message itself.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.Text(System.Object)">
            <summary>
            Add text to the graphical output
            </summary>
            <param name="Param">Text content</param>
        </member>
        <member name="M:Equations4.SystemFunctions.Img(System.String)">
            <summary>
            Insert static (bitmap) image to the graphical output
            </summary>
            <param name="ImageID">Image identifier (set in image library)</param>
        </member>
        <member name="M:Equations4.SystemFunctions.Block">
            <summary>
            Creates new block in the graphical output
            </summary>
        </member>
        <member name="M:Equations4.SystemFunctions.Block(System.String)">
            <summary>
            Creates new collapsible block in the graphical output
            </summary>
            <param name="Caption">Caption of the collapsible block</param>
        </member>
        <member name="M:Equations4.SystemFunctions.PageBreak">
            <summary>
            Insert PageBreak mark into output.
            </summary>
        </member>
        <member name="M:Equations4.SystemFunctions.Break">
            <summary>
            Terminates the closest enclosing loop or while statement in which it appears. Control is passed to the statement that follows the terminated statement, if any.
            </summary>
        </member>
        <member name="M:Equations4.SystemFunctions.Exit">
            <summary>
            Terminates calculation run.
            </summary>
        </member>
        <member name="M:Equations4.SystemFunctions.Continue">
            <summary>
            The continue statement passes control to the next iteration of the enclosing while, for, or foreach statement in which it appears.
            </summary>
        </member>
        <member name="M:Equations4.SystemFunctions.LoadExternCLC(System.String)">
            <summary>
            Load and initialize calculation from extern file.
            </summary>
            <param name="Path">Path to file containing required calculation. </param>
            <returns>Extern calculation object.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.Sort(System.Object,System.String)">
            <summary>
            Sort list of object by the property specified by name.
            </summary>
            <param name="List">List of objects to sort.</param>
            <param name="PropertyName">Case sensitive name of property used to sorting.</param>
            <returns>Sorted list of objects.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.Sort(System.Object,System.String,System.Boolean)">
            <summary>
            Sort list of object by the property specified by name.
            </summary>
            <param name="List">List of objects to sort.</param>
            <param name="PropertyName">Case sensitive name of property used to sorting.</param>
            <param name="Descendant">True to descendant sorting. Otherwise false.</param>
            <returns>Sorted list of objects.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.GetBounds(System.Object)">
            <summary>
            Returns rectangle bounds of the specified list of points.
            </summary>
            <param name="Points">List of points. Acceptable types: Point, PointF, PointD, structure.</param>
            <returns>Rectangle bounds of all the points in the list.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.SaveResults(Equations4.eResultType,System.String)">
            <summary>
            Save structured variable with all calculation results (defined by ESA_ID starting with 'Result.') to result-holder-node of IO structure
            </summary>
            <param name="ResultType">Result type which determines result place holder: ResultType.Member, ResultType.Place, ResultType.Combi</param>
            <param name="Key">Key used to identify result structure saved in given results node</param>
            <returns>Value saved to the results</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.SaveResults(Equations4.eResultType,System.String,System.Object)">
            <summary>
            Save user-defined value to result-holder-node of IO structure
            </summary>
            <param name="ResultType">Result type which determines result place holder: ResultType.Member, ResultType.Place, ResultType.Combi</param>
            <param name="Key">Key used to identify value saved in given results node</param>
            <param name="Value">Value saved under given key</param>
            <returns>Value saved to the results</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ReadResults(Equations4.eResultType)">
            <summary>
            Returns complete results node from IO structure
            </summary>
            <param name="ResultType">Result type which determines result place holder: ResultType.Member, ResultType.Place, ResultType.Combi</param>
            <returns>Results node from IO structure</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.ReadResults(Equations4.eResultType,System.String)">
            <summary>
            Reads results set with given key from IO..Results
            </summary>
            <param name="ResultType">Result type which determines result place holder: ResultType.Member, ResultType.Place, ResultType.Combi</param>
            <param name="Key">Key identifying results set in result place holder</param>
            <returns>Value saved in results holder Results set with given key</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.TryReadResults(Equations4.eResultType,System.String,System.Object@)">
            <summary>
            Tries to read results from given result set
            </summary>
            <param name="ResultType">Result type which determines result place holder: ResultType.Member, ResultType.Place, ResultType.Combi</param>
            <param name="Key">Key identifying results set in result place holder</param>
            <param name="Value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise NULL. This parameter can be passed uninitialized. </param>
            <returns>TRUE if the structure contains an element with the specified key; otherwise FALSE.</returns>
        </member>
        <member name="M:Equations4.SystemFunctions.RoundPolyline(System.Collections.IList,System.Double,System.Int32)">
            <summary>
            Round polyline with given radius
            </summary>
            <param name="Points">Polyline points</param>
            <param name="Radius">Radius</param>
            <param name="Segments">Number of segments in radius</param>
            <returns>Points of rounded polyline</returns>
        </member>
        <member name="T:Equations4.TInterpolationMatrix">
            <summary>
            Interpolation matrix.
            It is used for automatic interpolation of values in the 2D matrix
            Triangular interpolation is used to obtain value from existing points
            </summary>
        </member>
        <member name="M:Equations4.TInterpolationMatrix.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="_Values">Number of values in each point of the matrix.</param>
        </member>
        <member name="M:Equations4.TInterpolationMatrix.TryInterpolate(System.Double,System.Double,System.Double,System.Double,System.Object@)">
            <summary>
            Try to obtain value by interpolation between existing points
            </summary>
            <param name="X">X-coordinate of the point</param>
            <param name="Y">Y-coordinate of the point</param>
            <param name="ToleranceX">Maximum distance of existing points in X-coordinate</param>
            <param name="ToleranceY">Maximum distance of existing points in Y-coordinate</param>
            <param name="Values">Output parameter. Contains interpolated values, if interpolation was successful</param>
            <returns>TRUE, if the interpolation was successful, otherwise FALSE</returns>
        </member>
        <member name="M:Equations4.TInterpolationMatrix.AddPoint(System.Double,System.Double,System.Collections.IList)">
            <summary>
            Add calculated point to the matrix
            </summary>
            <param name="X">X-coordinate of the point</param>
            <param name="Y">Y-coordinate of the point</param>
            <param name="Values">Values in the point</param>
        </member>
        <member name="M:Equations4.TInterpolationMatrix.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Add calculated point to the matrix
            </summary>
            <param name="X">X-coordinate of the point</param>
            <param name="Y">Y-coordinate of the point</param>
            <param name="Value1">Calculated value</param>
        </member>
        <member name="M:Equations4.TInterpolationMatrix.AddPoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add calculated point to the matrix
            </summary>
            <param name="X">X-coordinate of the point</param>
            <param name="Y">Y-coordinate of the point</param>
            <param name="Value1">Calculated value #1</param>
            <param name="Value2">Calculated value #2</param>
        </member>
        <member name="M:Equations4.TInterpolationMatrix.AddPoint(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add calculated point to the matrix
            </summary>
            <param name="X">X-coordinate of the point</param>
            <param name="Y">Y-coordinate of the point</param>
            <param name="Value1">Calculated value #1</param>
            <param name="Value2">Calculated value #2</param>
            <param name="Value3">Calculated value #3</param>
        </member>
        <member name="M:Equations4.TInterpolationMatrix.AddPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add calculated point to the matrix
            </summary>
            <param name="X">X-coordinate of the point</param>
            <param name="Y">Y-coordinate of the point</param>
            <param name="Value1">Calculated value #1</param>
            <param name="Value2">Calculated value #2</param>
            <param name="Value3">Calculated value #3</param>
            <param name="Value4">Calculated value #4</param>
        </member>
        <member name="M:Equations4.TInterpolationMatrix.AddPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add calculated point to the matrix
            </summary>
            <param name="X">X-coordinate of the point</param>
            <param name="Y">Y-coordinate of the point</param>
            <param name="Value1">Calculated value #1</param>
            <param name="Value2">Calculated value #2</param>
            <param name="Value3">Calculated value #3</param>
            <param name="Value4">Calculated value #4</param>
            <param name="Value5">Calculated value #5</param>
        </member>
        <member name="T:Equations4.TList">
            <summary>
            List (array) of objects
            </summary>
        </member>
        <member name="T:Equations4.PointD">
            <summary>
            Point with coordinates of type 'double'
            </summary>
        </member>
        <member name="F:Equations4.PointD.X">
            <summary>
            Point coordinates
            </summary>
        </member>
        <member name="F:Equations4.PointD.Y">
            <summary>
            Point coordinates
            </summary>
        </member>
        <member name="M:Equations4.PointD.Move(System.Double,System.Double)">
            <summary>
            Creates new point with coordinates [X+dX, Y+dY]
            </summary>
            <param name="dX">Delta X</param>
            <param name="dY">Delta Y</param>
            <returns>New point derived from the current one and deltas: [X+dX, Y+dY]</returns>
        </member>
        <member name="T:Equations4.TReinfBar">
            <summary>
            Structure for reinforcement bar { X, Y, D, Area }
            </summary>
        </member>
        <member name="M:Equations4.TReinfBar.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor. Bar area is calculated automatically: Area = pi*(D/2)^2
            </summary>
            <param name="_X">Coordinate X</param>
            <param name="_Y">Coordinate Y</param>
            <param name="_D">Diameter</param>
        </member>
        <member name="M:Equations4.TReinfBar.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor. Area is set by parameter, is not calculated automatically.
            </summary>
            <param name="_X">Coordinate X</param>
            <param name="_Y">Coordinate Y</param>
            <param name="_D">Diameter</param>
            <param name="_Area">Area of the bar</param>
        </member>
        <member name="M:Equations4.TReinfBar.ToString">
            <summary>
            Convert bar to the string
            </summary>
            <returns>[X, Y, D]</returns>
        </member>
        <member name="M:Equations4.TSteelSectionsDB.GetGroup(System.String)">
            <summary>
            Returns section group with given name
            </summary>
            <param name="GroupName">Name of required group of sections</param>
            <returns>Section group with given name, or NULL if such a group not exists</returns>
        </member>
        <member name="T:Equations4.DynamicGraphics.TDimStyle">
            <summary>
            Style of dimensions used in dynamic graphics
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.Font">
            <summary>
            Font of dimension texts
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.Pen">
            <summary>
            Pen used for dimension lines, arrows
            </summary>
            <remarks>See also MSDN documentation: https://msdn.microsoft.com/cs-cz/library/system.drawing.pen(v=vs.110).aspx</remarks>
            <seealso cref="T:System.Drawing.Pen"/>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.Brush">
            <summary>
            Brush used to fill (render) dimension texts
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.Format">
            <summary>
            Format of the numbers
            <remarks>See MSDN documentation of number formats
            \n Custom formats: https://msdn.microsoft.com/cs-cz/library/0c899ak8(v=vs.110).aspx
            \n Standard formats: https://msdn.microsoft.com/cs-cz/library/dwhawy9k(v=vs.110).aspx
            </remarks>
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.Scale">
            <summary>
            Scale of the dimensions. 
            <remarks>
            Example 1:
            \n Distance between dimension points (=value) is 1.234 (meters).
            \n You want to display it in milimeters => Set Scale=1000 to get 1000*1.234 = 1234 (milimeters)
            \n
            \n Example 2:
            \n Your graphics is drawn in basic units (= meters), but you need dimensions in feets.
            \n Set Scale to 1/0.3048=3.28084 to get dimensions in feets
            </remarks>
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.FixedDimLength">
            <summary>
            The length of the dimension lead line (0 = automatic)
            </summary>
        </member>
        <member name="P:Equations4.DynamicGraphics.TDimStyle.LineOffset">
            <summary>
            The distance between dimension line and dimension end points
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.Overlap">
            <summary>
            Overlap of the dimension line, dimension lead lines
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.PointOffset">
            <summary>
            Distance between dimension end point and dimension lead line (applicable just if FixedDimLength = 0)
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.DimArrowSize">
            <summary>
            The size of dimesnion arrows
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.CaptionArrowSize">
            <summary>
            The size of the caption arrow
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.DimArrowShape">
            <summary>
            The shape of the dimension arrows
            </summary>
        </member>
        <member name="F:Equations4.DynamicGraphics.TDimStyle.CaptionArrowShape">
            <summary>
            The shape of the caption arrow
            </summary>
        </member>
        <member name="M:Equations4.DynamicGraphics.TDimStyle.Clone">
            <summary>
            Clones the dimension style
            </summary>
            <returns>Cloned dimension style</returns>
        </member>
        <member name="T:Equations4.DynamicGraphics.eArrowShape">
            <summary>
            The shape of the arrow
            </summary>
        </member>
        <member name="T:Equations4.DynamicGraphics.TGraphics">
            <summary>
            Object used for drawing dynamic graphics
            </summary>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.Draw(System.Double)">
            <summary>
            Draw graphics object to calculation output with given zoom factor
            </summary>
            <param name="Zoom">Scale of the graphics</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.Draw(System.Double,System.Double,System.Double)">
            <summary>
            Draw graphics object to calculation output with given zoom factors and rotation
            </summary>
            <param name="ZoomX">Scale of the graphics in axis X</param>
            <param name="ZoomY">Scale of the graphics in axis Y</param>
            <param name="Angle">Rotation of the graphics</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.Draw(System.Double,System.Double)">
            <summary>
            Draw graphics object to calculation output. Best fit the object to rectangle with given width and height. Keep aspect ratio.
            </summary>
            <param name="Width">Width of the rectangle</param>
            <param name="Height">Height of the rectangle</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.Draw(System.Double,System.Double,System.Boolean)">
            <summary>
            Draw graphics object to calculation output. Best fit the object to rectangle with given width and height.
            </summary>
            <param name="Width">Width of the rectangle</param>
            <param name="Height">Height of the rectangle</param>
            <param name="KeepAspectRatio">true to keep aspect ratio of the graphics object. Otherwise false.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.Clear">
            <summary>
            Clear all operations.
            </summary>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a line with given coordinates and default pen.
            </summary>
            <param name="X1">X-coordinate of start point</param>
            <param name="Y1">Y-coordinate of start point</param>
            <param name="X2">X-coordinate of second point</param>
            <param name="Y2">Y-coordinate of second point</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLine(System.Double,System.Double,System.Double,System.Double,System.Drawing.Pen)">
            <summary>
            Draw a line with given coordinates and pen.
            </summary>
            <param name="X1">X-coordinate of start point</param>
            <param name="Y1">Y-coordinate of start point</param>
            <param name="X2">X-coordinate of second point</param>
            <param name="Y2">Y-coordinate of second point</param>
            <param name="P">Pen used to draw a line</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLine(System.Object,System.Object)">
            <summary>
            Draws a line connecting two points.
            </summary>
            <param name="Pt1">Start point of the line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="Pt2">Second point of the line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLine(System.Object,System.Object,System.Drawing.Pen)">
            <summary>
            Draws a line connecting two points.
            </summary>
            <param name="Pt1">Start point of the line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="Pt2">Second point of the line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P">Pen used to draw a line</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLine(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Obsolete function. Do not use!
            </summary>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLines(System.Collections.IList)">
            <summary>
            Draws a open polyline defined by an array of Points.
            </summary>
            <param name="Points">Array of Points that represent the vertices of the polygon. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLines(System.Collections.IList,System.Drawing.Pen)">
            <summary>
            Draws a open polyline defined by an array of Points.
            </summary>
            <param name="Points">Array of Points that represent the vertices of the polygon. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P">Pen used to draw a polyline</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawPolygon(System.Collections.IList)">
            <summary>
            Draws a closed polygon defined by an array of Points.
            </summary>
            <param name="Points">Array of Points that represent the vertices of the polygon. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawPolygon(System.Collections.IList,System.Drawing.Pen)">
            <summary>
            Draws a closed polygon defined by an array of Points.
            </summary>
            <param name="Points">Array of Points that represent the vertices of the polygon. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P">Pen used to draw a polyline</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawPolyLine(System.Collections.IList)">
            <summary>
            Draws a closed polygon defined by an array of Points.
            </summary>
            <param name="Points">Array of Points that represent the vertices of the polygon. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawPolyLine(System.Collections.IList,System.Drawing.Pen)">
            <summary>
            Draws a closed polygon defined by an array of Points.
            </summary>
            <param name="Points">Array of Points that represent the vertices of the polygon. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P">Pen used to draw a polyline</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawPolyLine(System.String,System.Double,System.Collections.IList)">
            <summary>
            Obsolete function. Do not use!
            </summary>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height. 
            </summary>
            <param name="X">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="Y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="Width">The width of the rectangle to draw.</param>
            <param name="Height">The height of the rectangle to draw.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawRectangle(System.Double,System.Double,System.Double,System.Double,System.Drawing.Pen)">
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height. 
            </summary>
            <param name="X">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="Y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="Width">The width of the rectangle to draw.</param>
            <param name="Height">The height of the rectangle to draw.</param>
            <param name="P">A Pen that determines the color, width, and style of the rectangle.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawCircle(System.Double,System.Double,System.Double)">
            <summary>
            Draw a circle with given center and diameter.
            </summary>
            <param name="X">X-coordinate of circle center.</param>
            <param name="Y">Y-coordinate of circle center.</param>
            <param name="D">Circle diameter.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawCircle(System.Double,System.Double,System.Double,System.Drawing.Pen)">
            <summary>
            Draw a circle with given center, diameter and pen.
            </summary>
            <param name="X">X-coordinate of circle center.</param>
            <param name="Y">Y-coordinate of circle center.</param>
            <param name="D">Circle diameter.</param>
            <param name="P">Pen used to draw a circle.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawCircle(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Obsolete function. Do not use!
            </summary>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a ellipse with given center and dimensions.
            </summary>
            <param name="X">X-coordinate of circle center.</param>
            <param name="Y">Y-coordinate of circle center.</param>
            <param name="A">Length of major semi-axis.</param>
            <param name="B">Length of minor semi-axis.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawEllipse(System.Double,System.Double,System.Double,System.Double,System.Drawing.Pen)">
            <summary>
            Draw a ellipse with given center, dimensions and pen.
            </summary>
            <param name="X">X-coordinate of circle center.</param>
            <param name="Y">Y-coordinate of circle center.</param>
            <param name="A">Length of major semi-axis.</param>
            <param name="B">Length of minor semi-axis.</param>
            <param name="P">Pen used to draw a ellipse.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.
            </summary>
            <param name="X">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="Y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="Width">Width of the rectangle that defines the ellipse.</param>
            <param name="Height">Height of the rectangle that defines the ellipse.</param>
            <param name="StartAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="Angle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Drawing.Pen)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.
            </summary>
            <param name="X">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="Y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="Width">Width of the rectangle that defines the ellipse.</param>
            <param name="Height">Height of the rectangle that defines the ellipse.</param>
            <param name="StartAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="Angle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
            <param name="P">Pen used to draw a circle.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawText(System.String,System.Drawing.Font,System.Double,System.Double)">
            <summary>
            Draws the specified text string at the specified location with the specified Font.
            </summary>
            <param name="TXT">String to draw.</param>
            <param name="F">Font that defines the text format of the string.</param>
            <param name="X">X-coordinate of insert point of the text.</param>
            <param name="Y">Y-coordinate of insert point of the text.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawText(System.String,System.Drawing.Font,System.Double,System.Double,System.Drawing.ContentAlignment)">
            <summary>
            Draws the specified text string at the specified location with the specified Font.
            </summary>
            <param name="TXT">String to draw.</param>
            <param name="F">Font that defines the text format of the string.</param>
            <param name="X">X-coordinate of insert point of the text.</param>
            <param name="Y">Y-coordinate of insert point of the text.</param>
            <param name="Alignment">Position of text insert point.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawText(System.String,System.Drawing.Font,System.Double,System.Double,System.Drawing.ContentAlignment,System.Double)">
            <summary>
            Draws the specified text string at the specified location with the specified Font.
            </summary>
            <param name="TXT">String to draw.</param>
            <param name="F">Font that defines the text format of the string.</param>
            <param name="X">X-coordinate of insert point of the text.</param>
            <param name="Y">Y-coordinate of insert point of the text.</param>
            <param name="Alignment">Position of text insert point.</param>
            <param name="Angle">Angle of text in degrees</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawText(System.String,System.Drawing.Font,System.Double,System.Double,System.Drawing.ContentAlignment,System.Double,System.Drawing.Color)">
            <summary>
            Draws the specified text string at the specified location with the specified Font.
            </summary>
            <param name="TXT">String to draw.</param>
            <param name="F">Font that defines the text format of the string.</param>
            <param name="X">X-coordinate of insert point of the text.</param>
            <param name="Y">Y-coordinate of insert point of the text.</param>
            <param name="Alignment">Position of text insert point.</param>
            <param name="Angle">Angle of text in degrees</param>
            <param name="Color">Color of the text.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawText(System.String,System.Drawing.Font,System.Double,System.Double,System.Drawing.ContentAlignment,System.Drawing.Color)">
            <summary>
            Draws the specified text string at the specified location with the specified Font.
            </summary>
            <param name="TXT">String to draw.</param>
            <param name="F">Font that defines the text format of the string.</param>
            <param name="X">X-coordinate of insert point of the text.</param>
            <param name="Y">Y-coordinate of insert point of the text.</param>
            <param name="Alignment">Position of text insert point.</param>
            <param name="Color">Color of the text.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawText(System.String,System.String,System.Drawing.Font,System.Double,System.Double)">
            <summary>
            Obsolete function. Do not use!
            </summary>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawGraphics(Equations4.DynamicGraphics.TGraphics,System.Double,System.Double)">
            <summary>
            Draw a external graphics object at specified location.
            </summary>
            <param name="Graphics">External graphics object.</param>
            <param name="X">X-coordinate of insert point.</param>
            <param name="Y">Y-coordinate of insert point.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawGraphics(Equations4.DynamicGraphics.TGraphics,System.Double,System.Double,System.Double)">
            <summary>
            Draw a external graphics object at specified location.
            </summary>
            <param name="Graphics">External graphics object.</param>
            <param name="X">X-coordinate of insert point.</param>
            <param name="Y">Y-coordinate of insert point.</param>
            <param name="Angle">Rotation of the external graphics.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawGraphics(Equations4.DynamicGraphics.TGraphics,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a external graphics object at specified location.
            </summary>
            <param name="Graphics">External graphics object.</param>
            <param name="X">X-coordinate of insert point.</param>
            <param name="Y">Y-coordinate of insert point.</param>
            <param name="ZoomX">Scale of the inserted graphics in X-axis.</param>
            <param name="ZoomY">Scale of the inserted graphics in Y-axis.</param>
            <param name="Angle">Rotation of the external graphics.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.FillPolygon(System.Collections.IList,System.Drawing.Color)">
            <summary>
            Fills the given polygon with solid brush.
            </summary>
            <param name="Points">Array of Points that represent the vertices of the polygon. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="Color">Color of the Brush.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.FillPolygon(System.Collections.IList,System.Drawing.Brush)">
            <summary>
            Fills the polygon with given brush.
            </summary>
            <param name="Points">Array of Points that represent the vertices of the polygon. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="B">SolidBrush, HatchBrush, LinearGradientBrush, PathGradientBrush, TextureBrush.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.FillCircle(System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Fill a circle with given center and diameter using solid brush of given color.
            </summary>
            <param name="X">X-coordinate of circle center.</param>
            <param name="Y">Y-coordinate of circle center.</param>
            <param name="D">Circle diameter.</param>
            <param name="C">Color of brush used for filling</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.FillCircle(System.Double,System.Double,System.Double,System.Drawing.Brush)">
            <summary>
            Fill a circle with given center and diameter using given brush
            </summary>
            <param name="X">X-coordinate of circle center.</param>
            <param name="Y">Y-coordinate of circle center.</param>
            <param name="D">Circle diameter.</param>
            <param name="Brush">Brush used for filling.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.FillEllipse(System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Fill a ellipse with given center and dimensions with solid brush of given color.
            </summary>
            <param name="X">X-coordinate of circle center.</param>
            <param name="Y">Y-coordinate of circle center.</param>
            <param name="A">Length of major semi-axis.</param>
            <param name="B">Length of minor semi-axis.</param>
            <param name="C">Color of brush.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.FillEllipse(System.Double,System.Double,System.Double,System.Double,System.Drawing.Brush)">
            <summary>
            Fill a ellipse with given center and dimensions with given brush.
            </summary>
            <param name="X">X-coordinate of circle center.</param>
            <param name="Y">Y-coordinate of circle center.</param>
            <param name="A">Length of major semi-axis.</param>
            <param name="B">Length of minor semi-axis.</param>
            <param name="Brush">Brush used for filling</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDim(System.Object,System.Object)">
            <summary>
            Draws aligned dimension defined by start and end point.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDim(System.Object,System.Object,System.String)">
            <summary>
            Draws aligned dimension defined by start and end point.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDim(System.Object,System.Object,System.Double)">
            <summary>
            Draws aligned dimension defined by start and end point. Overrides default dimension offset.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="Offset">Distance betweeen dimension points and dimension line.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDim(System.Object,System.Object,System.String,System.Double)">
            <summary>
            Draws aligned dimension defined by start and end point. Overrides default dimension offset.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="Offset">Distance betweeen dimension points and dimension line.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDim(System.Object,System.Object,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws aligned dimension defined by start and end point. Used given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDim(System.Object,System.Object,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws aligned dimension defined by start and end point. Used given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimX(System.Object,System.Object)">
            <summary>
            Draws horizontal dimension defined by start and end point. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimX(System.Object,System.Object,System.String)">
            <summary>
            Draws horizontal dimension defined by start and end point. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimX(System.Object,System.Object,System.Double)">
            <summary>
            Draws horizontal dimension defined by start and end point. Overrides default dimension offset.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="Offset">Distance betweeen dimension points and dimension line.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimX(System.Object,System.Object,System.String,System.Double)">
            <summary>
            Draws horizontal dimension defined by start and end point. Overrides default dimension offset.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="Offset">Distance betweeen dimension points and dimension line.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimX(System.Object,System.Object,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws horizontal dimension defined by start and end point. Use given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimX(System.Object,System.Object,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws horizontal dimension defined by start and end point. Use given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimY(System.Object,System.Object)">
            <summary>
            Draws vertical dimension defined by start and end point. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimY(System.Object,System.Object,System.String)">
            <summary>
            Draws vertical dimension defined by start and end point. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimY(System.Object,System.Object,System.Double)">
            <summary>
            Draws vertical dimension defined by start and end point. Overrides default dimension offset.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="Offset">Distance betweeen dimension points and dimension line.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimY(System.Object,System.Object,System.String,System.Double)">
            <summary>
            Draws vertical dimension defined by start and end point. Overrides default dimension offset.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="Offset">Distance betweeen dimension points and dimension line.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimY(System.Object,System.Object,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws vertical dimension defined by start and end point. Use given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDimY(System.Object,System.Object,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws vertical dimension defined by start and end point. Use given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawRadiusDim(System.Object,System.Object)">
            <summary>
            Draws radius dimension defined by start and end point. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawRadiusDim(System.Object,System.Object,System.String)">
            <summary>
            Draws radius dimension defined by start and end point. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawRadiusDim(System.Object,System.Object,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws radius dimension defined by start and end point. Use given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawRadiusDim(System.Object,System.Object,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws radius dimension defined by start and end point. Use given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDiameterDim(System.Object,System.Object)">
            <summary>
            Draws diameter dimension defined by start and end point. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDiameterDim(System.Object,System.Object,System.String)">
            <summary>
            Draws diameter dimension defined by start and end point. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDiameterDim(System.Object,System.Object,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws diameter dimension defined by start and end point. Use given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawDiameterDim(System.Object,System.Object,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws diameter dimension defined by start and end point. Use given dimension style.
            </summary>
            <param name="Start">Start point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="End">End point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawAngleDim(System.Object,System.Object,System.Object)">
            <summary>
            Draw angle dimension defined by center point and two points on the angle lines. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Center">Center point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P1">First point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P2">Second point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawAngleDim(System.Object,System.Object,System.Object,System.String)">
            <summary>
            Draw angle dimension defined by center point and two points on the angle lines. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Center">Center point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P1">First point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P2">Second point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawAngleDim(System.Object,System.Object,System.Object,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draw angle dimension defined by center point and two points on the angle lines. Use given dimension style.
            </summary>
            <param name="Center">Center point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P1">First point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P2">Second point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawAngleDim(System.Object,System.Object,System.Object,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draw angle dimension defined by center point and two points on the angle lines. Use given dimension style.
            </summary>
            <param name="Center">Center point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P1">First point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P2">Second point of the dimension. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawAngleDim(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Draw angle dimension defined by 2+2 points. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="P1">Start point of the first line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P2">End point of the first line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P3">Start point of the second line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P4">End point of the second line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawAngleDim(System.Object,System.Object,System.Object,System.Object,System.String)">
            <summary>
            Draw angle dimension defined by 2+2 points. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="P1">Start point of the first line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P2">End point of the first line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P3">Start point of the second line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P4">End point of the second line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawAngleDim(System.Object,System.Object,System.Object,System.Object,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draw angle dimension defined by 2+2 points. Use given dimension style.
            </summary>
            <param name="P1">Start point of the first line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P2">End point of the first line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P3">Start point of the second line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P4">End point of the second line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawAngleDim(System.Object,System.Object,System.Object,System.Object,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draw angle dimension defined by 2+2 points. Use given dimension style.
            </summary>
            <param name="P1">Start point of the first line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P2">End point of the first line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P3">Start point of the second line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="P4">End point of the second line. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimX(System.Collections.IList)">
            <summary>
            Draw a horizontal chain dimension over given set of points. Use Graphics.DefaultDimStyle
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimX(System.Collections.IList,System.String)">
            <summary>
            Draw a horizontal chain dimension over given set of points. Use Graphics.DefaultDimStyle
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimX(System.Collections.IList,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draw a horizontal chain dimension over given set of points. Use given dimension style.
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimX(System.Collections.IList,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draw a horizontal chain dimension over given set of points. Use given dimension style.
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimY(System.Collections.IList)">
            <summary>
            Draw a vertical chain dimension over given set of points. Use Graphics.DefaultDimStyle
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimY(System.Collections.IList,System.Boolean)">
            <summary>
            Draw a vertical chain dimension over given set of points. Use Graphics.DefaultDimStyle. Possible to set position of vertical dimension
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="Reverse">Position of vertical chain dim. True = left side, False = Right side of Points</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimY(System.Collections.IList,System.String)">
            <summary>
            Draw a vertical chain dimension over given set of points. Use Graphics.DefaultDimStyle.
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimY(System.Collections.IList,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draw a vertical chain dimension over given set of points. Use given dimension style.
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimY(System.Collections.IList,System.String,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draw a vertical chain dimension over given set of points. Use given dimension style.
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawChainDimY(System.Collections.IList,System.String,Equations4.DynamicGraphics.TDimStyle,System.Boolean)">
            <summary>
            Draw a vertical chain dimension over given set of points. Use given dimension style. Possible to set position of vertical dimension
            </summary>
            <param name="Points">Set of points to be meassured. Acceptable types: Point, PointF, PointD, struct[X, Y].</param>
            <param name="UserText">User text of the dimension.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
            <param name="Reverse">Position of vertical chain dim. True = left side, False = Right side of Points</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLeader(System.Object,System.Object,System.String)">
            <summary>
            Draws a leader with specified text. Text is automatically oriented according to leader line.
            </summary>
            <param name="Start">Start point of the leader.</param>
            <param name="End">End point of the leader.</param>
            <param name="Text">Text to print.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLeader(System.Object,System.Object,System.String,System.Drawing.ContentAlignment)">
            <summary>
            Draws a leader with specified text. Text can me aligned as necessary.
            </summary>
            <param name="Start">Start point of the leader.</param>
            <param name="End">End point of the leader.</param>
            <param name="Text">Text to print.</param>
            <param name="Alignment">Alignment of the text towards the leader line.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawLeader(System.Object,System.Object,System.String,System.Drawing.ContentAlignment,Equations4.DynamicGraphics.TDimStyle)">
            <summary>
            Draws a leader with specified text, alignment and style.
            </summary>
            <param name="Start">Start point of the leader.</param>
            <param name="End">End point of the leader.</param>
            <param name="Text">Text to print.</param>
            <param name="Alignment">Alignment of the text towards the leader line.</param>
            <param name="DimStyle">Style defining font, color, offset and other properties of the dimension.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawArrow(System.Object,System.Object)">
            <summary>
            Draw arrow from the start to end point.
            </summary>
            <param name="Start">Starting point of the arrow.</param>
            <param name="End">End point of the arrow.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawArrow(System.Object,System.Object,Equations4.DynamicGraphics.eArrowShape,System.Double)">
            <summary>
            Draw arrow from the start to end point with specified shape and size.
            </summary>
            <param name="Start">Starting point of the arrow.</param>
            <param name="End">End point of the arrow.</param>
            <param name="ArrowShape">Shape of the arrow. Values from the enum: eArrowShape</param>
            <param name="ArrowSize">Size of the arrow in pixels.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawArrow(System.Object,System.Object,Equations4.DynamicGraphics.eArrowShape,System.Double,System.Drawing.Pen)">
            <summary>
            Draw arrow from the start to end point with specified shape and size.
            </summary>
            <param name="Start">Starting point of the arrow.</param>
            <param name="End">End point of the arrow.</param>
            <param name="ArrowShape">Shape of the arrow. Values from the enum: eArrowShape</param>
            <param name="ArrowSize">Size of the arrow in pixels.</param>
            <param name="P">Pen used to draw the arrow.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawImage(System.String,System.Double,System.Double)">
            <summary>
            Draw image from the calculation library at the specified position.
            </summary>
            <param name="ImageName">Case sensitive name of the image.</param>
            <param name="X">X-coordinate of the image insert point.</param>
            <param name="Y">Y-coordinate of the image insert point.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.DrawImage(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw image from the calculation library at the specified position  with the specified size.
            </summary>
            <param name="ImageName">Case sensitive name of the image.</param>
            <param name="X">X-coordinate of the image insert point.</param>
            <param name="Y">Y-coordinate of the image insert point.</param>
            <param name="Width">Width of the drawn image.</param>
            <param name="Height">Height of the drawn image.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.SetClip(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the clipping region for the graphics. Entity (or its part) outside this region will not be drawn. 
            </summary>
            <param name="X1">X-coord of first point</param>
            <param name="Y1">Y-coord of first point</param>
            <param name="X2">X-coord of second point</param>
            <param name="Y2">Y-coord of second point</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.SetClip(System.Object,System.Object)">
            <summary>
            Sets the clipping region for the graphics. Entity (or its part) outside this region will not be drawn. 
            </summary>
            <param name="Point1">First point defining the clipping rectangle</param>
            <param name="Point2">Second point defining the cliping rectangle</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.ResetClip">
            <summary>
            Resets clipping region.
            </summary>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.RotateUCS(System.Double)">
            <summary>
            Rotate user coordinate system (UCS) by a specified angle.
            </summary>
            <param name="Angle">Angle of rotation in degrees.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.MoveUCS(System.Double,System.Double)">
            <summary>
            Move user coordinate system (UCS) to specified location.
            </summary>
            <param name="NewX0">X-coordinate of new origin of the coordinate system.</param>
            <param name="NewY0">Y-coordinate of new origin of the coordinate system.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.ScaleUCS(System.Double,System.Double)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this Graphics object.
            </summary>
            <param name="ZoomX">Scale applied to X-Axis.</param>
            <param name="ZoomY">Scale applied to Y-Axis.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.SaveUCS(System.Int32)">
            <summary>
            Saves current user coordinate system to position defined by the index.
            </summary>
            <param name="Index">The index at which the UCS should be saved.</param>
        </member>
        <member name="M:Equations4.DynamicGraphics.TGraphics.LoadUCS(System.Int32)">
            <summary>
            Load a previously saved UCS from the library.
            </summary>
            <param name="Index">Index of the required UCS.</param>
        </member>
        <member name="T:Equations4.TMath">
            <summary>
            Class MATH contains mathematic functions and constants
            </summary>
        </member>
        <member name="F:Equations4.TMath.PI">
            <summary>
            π = 3.14159265359
            </summary>
        </member>
        <member name="F:Equations4.TMath.E">
            <summary>
            Euler's constant e = 2.71828182846
            </summary>
        </member>
        <member name="F:Equations4.TMath.NaN">
            <summary>
            NotAnyNumber
            </summary>
        </member>
        <member name="M:Equations4.TMath.GetPolynomRoots(System.Collections.IList)">
            <summary>
            Calculate real roots of given polynomial
            </summary>
            <param name="Coefficients">List of polynom coefficients sorted from highest grade to the lowest (Xn, ... X2, X1, X0)</param>
            <returns>Real roots of the polynom</returns>
        </member>
        <member name="M:Equations4.TMath.GetPolynomComplexRoots(System.Collections.IList)">
            <summary>
            Calculate complex roots of given polynomial
            </summary>
            <param name="Coefficients">List of polynom coefficients sorted from highest grade to the lowest (Xn, ... X2, X1, X0)</param>
            <returns>Complex roots of the polynom</returns>
        </member>
        <member name="M:Equations4.TMath.GetPolynomRoots0(System.Collections.IList)">
            <summary>
            Calculate real roots of given polynomial
            </summary>
            <param name="Coefficients">List of polynom coefficients sorted from 0 to N (X0, X1, X2 ... Xn)</param>
            <returns>Real roots of the polynom</returns>
        </member>
        <member name="M:Equations4.TMath.GetPolynomComplexRoots0(System.Collections.IList)">
            <summary>
            Calculate complex roots of given polynomial
            </summary>
            <param name="Coefficients">List of polynom coefficients sorted from 0 to N (X0, X1, X2 ... Xn)</param>
            <returns>Complex roots of the polynom</returns>
        </member>
        <member name="M:Equations4.TMath.GetPolynomRoots(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate real roots of given polynomial
            </summary>
            <param name="X0">Coefficient of X^0</param>
            <param name="X1">Coefficient of X^1</param>
            <param name="X2">Coefficient of X^2</param>
            <param name="X3">Coefficient of X^3</param>
            <param name="X4">Coefficient of X^4</param>
            <param name="X5">Coefficient of X^5</param>
            <param name="X6">Coefficient of X^6</param>
            <returns>Real roots of the polynom</returns>
        </member>
        <member name="M:Equations4.TMath.GetPolynomComplexRoots(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate complext roots of given polynomial
            </summary>
            <param name="X0">Coefficient of X^0</param>
            <param name="X1">Coefficient of X^1</param>
            <param name="X2">Coefficient of X^2</param>
            <param name="X3">Coefficient of X^3</param>
            <param name="X4">Coefficient of X^4</param>
            <param name="X5">Coefficient of X^5</param>
            <param name="X6">Coefficient of X^6</param>
            <returns>Complext roots of the polynom</returns>
        </member>
        <member name="M:Equations4.TMath.SolveQuadraticEquation(System.Double,System.Double,System.Double)">
            <summary>
            Solve quadratic equation
            </summary>
            <param name="A">Coefficient of X2</param>
            <param name="B">Coefficient of X1</param>
            <param name="C">Coefficient of X0</param>
            <returns>Structure with roots and/or additional message (one root, no real roots)</returns>
        </member>
        <member name="M:Equations4.TMath.SolveCubicEquation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Solve cubic equation
            </summary>
            <param name="A">Coefficient of X3</param>
            <param name="B">Coefficient of X2</param>
            <param name="C">Coefficient of X1</param>
            <param name="D">Coefficient of X0</param>
            <returns>Structure with roots and/or additional message (one/two roots, no real roots, ...)</returns>
        </member>
        <member name="T:Equations4.eResultType">
            <summary>
            Place holder of the run-time results (Member, Section, Combi)
            </summary>
        </member>
        <member name="T:Equations4.TMatrix">
            <summary>
            Implementation of the matrix
            </summary>
        </member>
        <member name="M:Equations4.TMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="numRows">Number of rows</param>
            <param name="numColumns">Number of columns</param>
        </member>
        <member name="M:Equations4.TMatrix.GetNumberOfRows">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.TMatrix.GetNumberOfColumns">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.TMatrix.SetComponent(System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Equations4.TMatrix.MultipleByScalar(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Equations4.TMatrix.AddScalar(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Equations4.TMatrix.SubstractScalar(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Equations4.TMatrix.DivideByScalar(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Equations4.TMatrix.Transpose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Equations4.TMatrix.MultiplyByMatrix(Equations4.TMatrix)">
            <summary>
            
            </summary>
            <param name="secMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TMatrix.MultiplyByRowVector(Equations4.TVector)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TMatrix.MultipleByColumnVector(Equations4.TVector)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TMatrix.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="T:Equations4.TVector">
            <summary>
            Implementation of scalar vector
            </summary>
        </member>
        <member name="M:Equations4.TVector.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Dimension of vector</param>
        </member>
        <member name="M:Equations4.TVector.#ctor(System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="Params">Initial values of vector components</param>
        </member>
        <member name="P:Equations4.TVector.Item(System.Int32)">
            <summary>
            Return value of vector component
            </summary>
            <param name="index">Index of the component</param>
            <returns>Value of the component at the positition given by Index</returns>
        </member>
        <member name="M:Equations4.TVector.GetVector">
            <summary>
            Return values of the vector components
            </summary>
            <returns>List of vector values</returns>
        </member>
        <member name="M:Equations4.TVector.Count">
            <summary>
            Return number of vector components
            </summary>
            <returns>Number of vector components</returns>
        </member>
        <member name="M:Equations4.TVector.GetComponent(System.Double)">
            <summary>
            Return value of the component on the position given by index
            </summary>
            <param name="index">Position of desired component</param>
            <returns>Value of component on the position given by index</returns>
        </member>
        <member name="M:Equations4.TVector.InsertComponent(System.Double)">
            <summary>
            Insert new value at the end of the vector. This command will change the size of the vector.
            </summary>
            <param name="value">Value of the new component</param>
        </member>
        <member name="M:Equations4.TVector.InsertComponentOnPos(System.Double,System.Double)">
            <summary>
            Insert new component on the position given by index.
            </summary>
            <param name="index">Position on which the new component will be inserted</param>
            <param name="value">Value of the new component</param>
        </member>
        <member name="M:Equations4.TVector.AddVector(Equations4.TVector)">
            <summary>
            Add the vector. Each component of the result is sum of components of current and new vector
            </summary>
            <param name="vector">Vector to be added</param>
        </member>
        <member name="M:Equations4.TVector.AddScalar(System.Double)">
            <summary>
            Add scalar value to each component of the vector
            </summary>
            <param name="value">Scalar value to be added to each component of the vector</param>
        </member>
        <member name="M:Equations4.TVector.AddAndCreateVector(Equations4.TVector)">
            <summary>
            Add given vector to the current one and return result as a new vector
            </summary>
            <param name="vector">Vector to be added</param>
            <returns>Sum of current vector and the vector passed as a parameter</returns>
        </member>
        <member name="M:Equations4.TVector.SubstractVector(Equations4.TVector)">
            <summary>
            Subtract given vector from current one
            </summary>
            <param name="vector">Vector to be subtracted</param>
        </member>
        <member name="M:Equations4.TVector.SubstractAndCreateVector(Equations4.TVector)">
            <summary>
            Subtract given vector from the current one and return result as a new vector
            </summary>
            <param name="vector">Vector to be subtracted</param>
            <returns>Subtaction of current vector and the vector passed as a parameter</returns>
        </member>
        <member name="M:Equations4.TVector.SubtractScalar(System.Double)">
            <summary>
            Subtract given scalar from each component of the vector
            </summary>
            <param name="value">Value to be subtracted</param>
        </member>
        <member name="M:Equations4.TVector.MultipleByScalar(System.Double)">
            <summary>
            Multiply each component of the vector by the scalar value
            </summary>
            <param name="value">Multiplicator</param>
        </member>
        <member name="M:Equations4.TVector.DivideByScalar(System.Double)">
            <summary>
            Divide each component of the vector by the scalar value
            </summary>
            <param name="value">Divider</param>
        </member>
        <member name="M:Equations4.TVector.DotProduct(Equations4.TVector)">
            <summary>
            Dot product of current vector and vector passed as a parameter
            </summary>
            <param name="vector">Vector used in dot production</param>
            <returns>Dot production of the current vector and parameter</returns>
        </member>
        <member name="M:Equations4.TVector.CompareVector(Equations4.TVector)">
            <summary>
            Compare given vector and vector passed as a parameter
            </summary>
            <param name="vector">Vector to compare</param>
            <returns>TRUE, if vectors are the same. Otherwise FALSE</returns>
        </member>
        <member name="M:Equations4.TVector.CrossProduct(Equations4.TVector)">
            <summary>
            Cross production of current vector and vector passed as a parameter
            </summary>
            <param name="vector">Second vector of cross production</param>
            <returns>Cross production of the current vector and parameter</returns>
        </member>
        <member name="M:Equations4.TVector.EuclidNorm">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.Lenght">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.Normalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Equations4.TVector.DyadicMultiplication(Equations4.TVector)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.Zero">
            <summary>
            
            </summary>
        </member>
        <member name="M:Equations4.TVector.Rotate2DVector(System.Double)">
            <summary>
            
            </summary>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.Rotate2DVector(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="sinAngle"></param>
            <param name="cosAngle"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.GetPerpendicularNormal2DVector">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.GetPerpendicular2DVector">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.Alpha2DVect">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.GetOrientAngle2DVect(Equations4.TVector)">
            <summary>
            
            </summary>
            <param name="mV"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.Rotate3DVectorAroundAxis(Equations4.TVector,System.Double)">
            <summary>
            rotates vector around NORMALIZED axis
            </summary>
            <param name="Axis"></param>
            <param name="fi"></param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TVector.Rotate3DVectorAroundAxis(Equations4.TVector,System.Int32)">
            <summary>
            rotates vector around NORMALIZED axis by n90 * 90 degrees
            </summary>
            <param name="Axis"></param>
            <param name="n90"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Equations4.TVector.GetOrientAngle3DVect(Equations4.TVector,Equations4.TVector)" -->
        <!-- Badly formed XML comment ignored for member "M:Equations4.TVector.GetOrientAngleAroundAxis(Equations4.TVector,Equations4.TVector)" -->
        <member name="M:Equations4.TVector.GetAngle3DVect(Equations4.TVector)">
            <summary>
            computes angle between this vector and vector V\n
            returns value from  0 to PI 
            </summary>
            <param name="mV"></param>
            <returns></returns>
        </member>
        <member name="T:Equations4.Images">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Equations4.Images.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Equations4.Images.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Equations4.Images.Collapse">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.Expand">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.HEA">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.HEB">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.HEM">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.I">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.IPE">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.IPN">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.Le">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.Ln">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.NoImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.Qe">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.Qn">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.RD">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.T">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.TR">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.U">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.Ubox">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.UPE">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Equations4.Images.User">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Equations4.Strings.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.Description">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ErrorParsingCondition">
            <summary>
              Looks up a localized string similar to Condition syntax error!\nError message:.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ExceptionLog">
            <summary>
              Looks up a localized string similar to Logarithm of negative number!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ExceptionNoClosingBracket">
            <summary>
              Looks up a localized string similar to Missing closing bracket!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ExceptionNoOpeningBracket">
            <summary>
              Looks up a localized string similar to Missing opening bracket!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ExceptionPowerOfNegativ">
            <summary>
              Looks up a localized string similar to Power of negative number!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ExceptionRootOfNegativ">
            <summary>
              Looks up a localized string similar to Root of negative number!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ExceptionZeroDivision">
            <summary>
              Looks up a localized string similar to Zero division!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.InvalidCharType">
            <summary>
              Looks up a localized string similar to Invalid Concrete.CharType !.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.InvalidStiffnessType">
            <summary>
              Looks up a localized string similar to Invalid stiffness type!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.MissingLicence">
            <summary>
              Looks up a localized string similar to Missing licence.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.NewerVersionException">
            <summary>
              Looks up a localized string similar to Calculation template was generated in higher version of SCIA DesignForms. Please update your application and try again!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.NoLicence1">
            <summary>
              Looks up a localized string similar to Missing module!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.NoLicence2">
             <summary>
               Looks up a localized string similar to You are missing the required module to use this form.
            Missing module: {0}.
            
            Please contact your software reseller or
            visit our website: http://sciadesignforms.com.
             </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.NoLicenceForCLC">
            <summary>
              Looks up a localized string similar to You don&apos;t have the required license to open this calculation template..
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.NoLicenceToExportCLC">
            <summary>
              Looks up a localized string similar to You don&apos;t have the license to generate calculation signed with licence ID = {0}..
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.Note">
            <summary>
              Looks up a localized string similar to Note.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.ResultProperties_String_RatioNotSet">
             <summary>
               Looks up a localized string similar to No numeric result is binded to string result &apos;{0}&apos;.
            Please bind some numeric result to &apos;{1}&apos; in HeaderEditor..
             </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.SetClipBoardFailed">
            <summary>
              Looks up a localized string similar to An error occured while copying preview to clipboard!.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.Solution">
            <summary>
              Looks up a localized string similar to Solution.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.StudentVersion">
            <summary>
              Looks up a localized string similar to STUDENT VERSION.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.Type">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.UnknownVariable">
            <summary>
              Looks up a localized string similar to Unknown variable &quot;{0}&quot; !.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.VariableNotContainChild">
            <summary>
              Looks up a localized string similar to Variable &quot;{0}&quot; do not contain child &quot;{1}&quot; !.
            </summary>
        </member>
        <member name="P:Equations4.Strings.Messages.Warning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="T:Equations4.TConvert">
            <summary>
            Class used for type conversions
            </summary>
        </member>
        <member name="M:Equations4.TConvert.ToDouble(System.Object)">
            <summary>
            Convert given value to double
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to double</returns>
        </member>
        <member name="M:Equations4.TConvert.ToSingle(System.Object)">
            <summary>
            Convert given value to float
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to float</returns>
        </member>
        <member name="M:Equations4.TConvert.ToUInt16(System.Object)">
            <summary>
            Convert given value to UInt16
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to UInt16</returns>
        </member>
        <member name="M:Equations4.TConvert.ToUInt32(System.Object)">
            <summary>
            Convert given value to UInt32
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to UInt32</returns>
        </member>
        <member name="M:Equations4.TConvert.ToUInt64(System.Object)">
            <summary>
            Convert given value to UInt64
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to UInt64</returns>
        </member>
        <member name="M:Equations4.TConvert.ToInt16(System.Object)">
            <summary>
            Convert given value to Int16
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to Int16</returns>
        </member>
        <member name="M:Equations4.TConvert.ToInt32(System.Object)">
            <summary>
            Convert given value to Int32
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to Int32</returns>
        </member>
        <member name="M:Equations4.TConvert.ToInt64(System.Object)">
            <summary>
            Convert given value to Int64
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to Int64</returns>
        </member>
        <member name="M:Equations4.TConvert.ToSByte(System.Object)">
            <summary>
            Convert given value to SByte
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to SByte</returns>
        </member>
        <member name="M:Equations4.TConvert.ToByte(System.Object)">
            <summary>
            Convert given value to Byte
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to Byte</returns>
        </member>
        <member name="M:Equations4.TConvert.ToDecimal(System.Object)">
            <summary>
            Convert given value to Decimal
            </summary>
            <param name="O">Value for conversion</param>
            <returns>Value converted to Decimal</returns>
        </member>
        <member name="T:Equations4.TTools">
            <summary>
            Class TOOLS constains system properties and settings; productivity tools
            </summary>
        </member>
        <member name="F:Equations4.TTools.PI">
            <summary>
            π = 3.14159265359
            </summary>
        </member>
        <member name="F:Equations4.TTools.E">
            <summary>
            Eulers constant e = 2.71828...
            </summary>
        </member>
        <member name="F:Equations4.TTools.NaN">
            <summary>
            NotAnyNumber
            </summary>
        </member>
        <member name="P:Equations4.TTools.Dir_PublicDocs">
            <summary>
            Path to the DesignForms's folder in Windows public documents
            </summary>
        </member>
        <member name="P:Equations4.TTools.Dir_UserDocs">
            <summary>
            Path to the DesignForms's folder in Windows user documents
            </summary>
        </member>
        <member name="P:Equations4.TTools.Dir_CustomLibrary">
            <summary>
            Path to the DesignForms's CustomLibraries folder
            </summary>
        </member>
        <member name="P:Equations4.TTools.Dir_Forms">
            <summary>
            /// Path to the DesignForms's forms folder
            </summary>
        </member>
        <member name="P:Equations4.TTools.CLC_Dir">
            <summary>
            Parent folder of current MasterCLC
            </summary>
        </member>
        <member name="P:Equations4.TTools.CLC_FullPath">
            <summary>
            Full path to the current MasterCLC
            </summary>
        </member>
        <member name="M:Equations4.TTools.GetPlaces(System.Collections.IList,System.Double,System.Double,System.Double)">
            <summary>
            Return all places from the list which has given coordinates
            </summary>
            <param name="Places">List of Places (e.g. IO.Beam.Section)</param>
            <param name="X">X-coordinate of the Place</param>
            <param name="Y">Y-coordinate of the Place</param>
            <param name="Z">Z-coordinate of the Place</param>
            <returns>Array of all Place in given coordinates</returns>
        </member>
        <member name="M:Equations4.TTools.GetPlaces(System.Collections.IList,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Return all places from the list which has given coordinates
            </summary>
            <param name="Places">List of Places (e.g. IO.Beam.Section)</param>
            <param name="X">X-coordinate of the Place</param>
            <param name="Y">Y-coordinate of the Place</param>
            <param name="Z">Z-coordinate of the Place</param>
            <param name="Precision">Precision used for comparing numeric values (default value = 4)</param>
            <returns>Array of all Place in given coordinates</returns>
        </member>
        <member name="T:Equations4.TCustomLibraryDataTable">
            <summary>
            CustomLibrary DataTable
            </summary>
        </member>
        <member name="M:Equations4.TCustomLibraryDataTable.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="FileName">Reelative path to the source file. Source file must be located it CustomLibrary data folder.</param>
        </member>
        <member name="M:Equations4.TCustomLibraryDataTable.Convert">
            <summary>
            Convert all values in the table from the string to the number with respect to the units of each column.
            All numbers are stored in basic (SI) units
            </summary>
            <returns></returns>
        </member>
        <member name="M:Equations4.TCustomLibraryDataTable.GetStructure(System.Data.DataRow)">
            <summary>
            Convert values from the given row of the table. 
            Values are converted from the string to the number with respect to the units of each column.
            All numbers are stored in basic (SI) units
            </summary>
            <param name="Row">Row to be converted</param>
            <returns>Structured variable with converted values in basic (SI) units</returns>
        </member>
        <member name="M:Equations4.TCustomLibraryDataTable.Select(System.String,System.String)">
            <summary>
            Finds the first row whose "Item" is equal to parameter 'ItemName' and returns its property defined by parameter 'Symbol' 
            </summary>
            <param name="ItemName">Value of the "Item" property, according to which the row of the table is found.</param>
            <param name="Symbol">Name of the property to be returned as a result</param>
            <returns>The value of the property 'Symbol' from the DataRow whose "Item" equals to 'ItemName'</returns>
        </member>
        <member name="T:Equations4.TEuroCode">
            <summary>
            EuroCode contains general EC functions
            </summary>
        </member>
        <member name="M:Equations4.TEuroCode.SteelSectionBendingClass(Equations4.TStructure,System.Double)">
            <summary>
            Returns cross section bending class according to EC 1993
            </summary>
            <param name="Geometry">Structured variable with cross section properties.</param>
            <param name="fy">Yield strength of cross section material</param>
            <returns>Cross section bending class according to EC 1993</returns>
        </member>
        <member name="M:Equations4.TEuroCode.SteelSectionPressureClass(Equations4.TStructure,System.Double)">
            <summary>
            Returns cross section pressure class according to EC 1993
            </summary>
            <param name="Geometry">Structured variable with cross section properties.</param>
            <param name="fy">Yield strength of cross section material</param>
            <returns>Cross section pressure class according to EC 1993</returns>
        </member>
        <member name="M:Equations4.TEuroCode.SteelSectionBucklingCoeff(Equations4.TStructure,System.Double)">
            <summary>
            Returns structured variable with buckling curves and coefficients
            </summary>
            <param name="CS">Structured variable with cross section properties.</param>
            <param name="fy">Yield strength of cross section material</param>
            <returns>Structured variable with buckling curves and coefficients</returns>
        </member>
        <member name="M:Equations4.UnitParser.State.#ctor(System.Int32[],System.Int32[])">
            <summary>
            State transition data for this state. Pairs of elements of the 
            goto array associate symbol ordinals with next state indices.
            The actions array is passed to another constructor. 
            </summary>
            <param name="actions">The action list</param>c
            <param name="goToList">Next state data</param>
        </member>
        <member name="M:Equations4.UnitParser.State.#ctor(System.Int32[])">
            <summary>
            Action data for this state. Pairs of elements of the 
            action array associate action ordinals with each of
            those symbols that have actions in the current state.
            </summary>
            <param name="actions">The action array</param>
        </member>
        <member name="M:Equations4.UnitParser.State.#ctor(System.Int32)">
            <summary>
            Set the default action for this state.
            </summary>
            <param name="defaultAction">Ordinal of the default action</param>
        </member>
        <member name="M:Equations4.UnitParser.State.#ctor(System.Int32,System.Int32[])">
            <summary>
            Set the default action and the state transition table.
            </summary>
            <param name="defaultAction">The default action</param>
            <param name="goToList">Transitions from this state</param>
        </member>
        <member name="M:Equations4.UnitParser.Rule.#ctor(System.Int32,System.Int32[])">
            <summary>
            Rule constructor.  This holds the ordinal of
            the left hand side symbol, and the list of
            right hand side symbols, in lexical order.
            </summary>
            <param name="left">The LHS non-terminal</param>
            <param name="right">The RHS symbols, in lexical order</param>
        </member>
        <member name="P:Equations4.UnitParser.PushdownPrefixState`1.Item(System.Int32)">
            <summary>
            Indexer for values of the stack below the top.
            </summary>
            <param name="index">index of the element, starting from the bottom</param>
            <returns>the selected element</returns>
        </member>
        <member name="P:Equations4.UnitParser.PushdownPrefixState`1.Depth">
            <summary>
            The current depth of the stack.
            </summary>
        </member>
        <member name="T:Equations4.TStructure">
            <summary>
            Structured variable
            </summary>
        </member>
        <member name="P:Equations4.TStructure.Count">
            <summary>
            Property 'Count' is not implemented for type 'Structure'.\nIf you need number of Key-Value pairs, use Structure.Keys.Count
            </summary>
        </member>
        <member name="M:Equations4.TStructure.#ctor(System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            Constructor of the structure.\n
            Number of Key-Value pairs is unlimited.
            </summary>
            <param name="Key1">Key of the fist value</param>
            <param name="Value1">First value</param>
            <param name="Key2">Key of the second value</param>
            <param name="Value2">Second value</param>
            <param name="KeyN">Key of the Nth value</param>
            <param name="ValueN">Nth value</param>
        </member>
        <member name="P:Equations4.TStructure.Keys">
            <summary>
            Gets a collection containing the keys in the structure
            </summary>
        </member>
        <member name="P:Equations4.TStructure.Values">
            <summary>
            Gets a collection containing the values in the structure
            </summary>
        </member>
        <member name="M:Equations4.TStructure.AddChild(Equations4.TStructure)">
            <summary>
            Add structured subnode to the structure
            </summary>
            <param name="NewChild">Structured subnode</param>
        </member>
        <member name="M:Equations4.TStructure.AddChild(System.String,System.Object)">
            <summary>
            Add new subnode to the structure
            </summary>
            <param name="Key">String key (name) of the subnode. This key is used to obtain the value from the structure.</param>
            <param name="Value">Value of the subnode</param>
        </member>
        <member name="M:Equations4.TStructure.Clear">
            <summary>
            Clears the content of the structure.
            </summary>
        </member>
        <member name="M:Equations4.TStructure.CreatePath(System.String)">
            <summary>
            Creates complete sub-structure defined by the given path
            </summary>
            <param name="Path">Path to be created</param>
            <returns>Value saved at given path.</returns>
        </member>
        <member name="M:Equations4.TStructure.ContainsKey(System.String)">
            <summary>
            Determines whether the structure contains an element with the specified key.
            </summary>
            <param name="Key">The key to locate in the structure</param>
            <returns>true if the structure contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Equations4.TStructure.Contains(System.String)">
            <summary>
            Returns true, if the given Key exists. The MUST NOT be structured path. If you need to detect if the path exists, use function "ContainsPath"
            </summary>
            <param name="Key">Key to be tested. Key MUST NOT be structured path.</param>
            <returns>TRUE if the Key exists, otherwise false</returns>
        </member>
        <member name="M:Equations4.TStructure.ContainsPath(System.String)">
            <summary>
            Returns true, if the given Path exists. Path can be structured.
            </summary>
            <param name="Path">Path to the subnode</param>
            <returns>Returns TRUE, if the specified path exists. Otherwise false.</returns>
        </member>
        <member name="M:Equations4.TStructure.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="Key">The key of the value to get.</param>
            <param name="Value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. </param>
            <returns>TRUE if the structure contains an element with the specified key; otherwise, FALSE.</returns>
        </member>
        <member name="M:Equations4.TStructure.TryGetValueFromPath(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="Path">The path (including '.' and '[]' to the value to get.</param>
            <param name="Value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. </param>
            <returns>TRUE if the structure contains an element with the specified key; otherwise, FALSE.</returns>
        </member>
        <member name="M:Equations4.TStructure.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the structure.
            </summary>
            <param name="Key"></param>
        </member>
        <member name="M:Equations4.TStructure.Set(System.String,System.Object)">
            <summary>
            Sets the value of subnode. Function creates the subnode, if not exists
            </summary>
            <param name="Path">Path of the subnode</param>
            <param name="Value">Value of the subnode</param>
        </member>
        <member name="M:Equations4.TStructure.Get(System.String)">
            <summary>
            Returns the value of the subnode at given path
            </summary>
            <param name="Path">Complete path to the subnode</param>
            <returns>The value of the subnode at given path</returns>
        </member>
        <member name="M:Equations4.TStructure.Get(System.String,System.Object)">
            <summary>
            Returns the value of the subnode at given path. If the path doesn't exists, returns specified default value.
            </summary>
            <param name="Path">Complete path to the subnode</param>
            <param name="DefaultValue">Default value used if the subnode is not found (path not exitst).</param>
            <returns>The value of the subnode at given path, or specified default value.</returns>
        </member>
        <member name="M:Equations4.TStructure.ToString">
            <summary>
            Convert the Structure to the string. Nested structures are not expanded.
            </summary>
            <returns>String representation of the structure</returns>
        </member>
        <member name="M:Equations4.TStructure.ToString(System.Double)">
            <summary>
            Convert the Structure to the string with given level of expansion
            </summary>
            <param name="MaxLevel">Depth of expanded sub-structures and lists</param>
            <returns></returns>
        </member>
        <member name="M:Equations4.TStructure.Clone">
            <summary>
            Returns deep copy of the structure. Warning: This function will stop the program run, if the structure contains circular reference!
            </summary>
            <returns>Deep copy of the structure.</returns>
        </member>
        <member name="T:Equations4.Graph.TGraph_Legend">
            <summary>
            Graph legend
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Legend.SpacingX">
            <summary>
            Horizontal/vertical distance between legend and the border of the graph
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Legend.SpacingY">
            <summary>
            Horizontal/vertical distance between legend and the border of the graph
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Legend.Visible">
            <summary>
            Sets the visibility of the legend
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Legend.Font">
            <summary>
            Font used to render texts of the legend
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Legend.BackBrush">
            <summary>
            Brush used for legend background
            </summary>
        </member>
        <member name="P:Equations4.Graph.TGraph_Legend.BackColor">
            <summary>
            Color of the legend background
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Legend.BorderPen">
            <summary>
            Pen used for legend border
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Legend.Alignment">
            <summary>
            Position of the legend in the graph rectangle
            </summary>
        </member>
        <member name="T:Equations4.Graph.TGraph_Axis">
            <summary>
            X or Y axis of the graph
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.Min">
            <summary>
            Minimal value of the axis
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.Max">
            <summary>
            Maximal value of the axis
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.Format">
            <summary>
            Format of numbers on the axis
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.Scale">
            <summary>
            Scale of the axis (used just for drawing)
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.MajorStep">
            <summary>
            Major step of the axis - used to draw line grid
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.Step">
            <summary>
            Minor step of the axis
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.Pen">
            <summary>
            Pen used to draw the axis
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.Font">
            <summary>
            Font used for numbers on the axis
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Axis.Caption">
            <summary>
            Caption of the axis
            </summary>
        </member>
        <member name="T:Equations4.Graph.TGraph_Grid">
            <summary>
            Horizontal or vertical line grid
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Grid.Pen">
            <summary>
            Pen used for grid lines
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Grid.Visible">
            <summary>
            Sets the visibility of the grid
            </summary>
        </member>
        <member name="T:Equations4.Graph.TGraph_Caption">
            <summary>
            Graph caption
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Caption.Caption">
            <summary>
            The text of the graph caption
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Caption.Font">
            <summary>
            Font of the caption
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph_Caption.Visible">
            <summary>
            Sets the visibility of the graph caption
            </summary>
        </member>
        <member name="T:Equations4.Graph.ePointStyle">
            <summary>
            Style of graph point
            </summary>
        </member>
        <member name="T:Equations4.Graph.TGraph">
            <summary>
            Graph object
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph.XAxis">
            <summary>
            X-axis of the graph
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph.YAxis">
            <summary>
            Y-axis of the graph
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph.XGrid">
            <summary>
            Horizontal line grid
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph.YGrid">
            <summary>
            Vertical line grid
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph.Caption">
            <summary>
            Graph caption
            </summary>
        </member>
        <member name="F:Equations4.Graph.TGraph.Legend">
            <summary>
            Graph legend
            </summary>
        </member>
        <member name="M:Equations4.Graph.TGraph.AddData(System.Object)">
            <summary>
            Add new data object to the graph
            </summary>
            <param name="O">Point or list of points</param>
        </member>
        <member name="M:Equations4.Graph.TGraph.AddData(System.Object,System.String)">
            <summary>
            Add new data object to the graph
            </summary>
            <param name="O">Point or list of points</param>
            <param name="Description">Description of the point/dataset - will be used in graph legend</param>
        </member>
        <member name="M:Equations4.Graph.TGraph.AddData(System.Object,System.Drawing.Pen)">
            <summary>
            Add new data object to the graph
            </summary>
            <param name="O">Point or list of points</param>
            <param name="Pen">Pen used to render the point in the graph</param>
        </member>
        <member name="M:Equations4.Graph.TGraph.AddData(System.Object,System.String,System.Drawing.Pen)">
            <summary>
            Add new data object to the graph
            </summary>
            <param name="O">Point or list of points</param>
            <param name="Description">Description of the point/dataset - will be used in graph legend</param>
            <param name="Pen">Pen used to render the point in the graph</param>
        </member>
        <member name="M:Equations4.Graph.TGraph.AddData(System.Object,System.Drawing.Pen,Equations4.Graph.ePointStyle)">
            <summary>
            Add new data object to the graph
            </summary>
            <param name="P">Point to be added to the graph</param>
            <param name="Pen">Pen used to render the point in the graph</param>
            <param name="PointStyle">PointStyle used for the point</param>
        </member>
        <member name="T:Equations4.Table.TTableCell">
            <summary>
            Table cell
            </summary>
        </member>
        <member name="T:Equations4.Table.TTableColumn">
            <summary>
            Table column
            </summary>
        </member>
        <member name="T:Equations4.Table.TTableRow">
            <summary>
            Table row
            </summary>
        </member>
        <member name="T:Equations4.Table.TTable">
            <summary>
            Table used in graphical output
            </summary>
        </member>
        <member name="M:Equations4.Table.TTable.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Columns">Number of columns of the table</param>
        </member>
        <member name="M:RealPolynomialRootFinder.FindRoots(System.Double[])">
            <summary>
            The Jenkins–Traub algorithm for polynomial zeros translated into pure VB.NET. It is a translation of the C++ algorithm, which in turn is a translation of the FORTRAN code by Jenkins. See Wikipedia for referances: http://en.wikipedia.org/wiki/Jenkins%E2%80%93Traub_algorithm 
            </summary>
            <param name="Input">The coefficients for the polynomial starting with the highest degree and ends on the constant, missing degree must be implemented as a 0.</param>
            <returns>All the real and complex roots that are found is returned in a list of complex numbers.</returns>
            <remarks>The maximum alloed degree polynomial for this implementation is set to 100. It can only take real coefficients.</remarks>
        </member>
    </members>
</doc>
